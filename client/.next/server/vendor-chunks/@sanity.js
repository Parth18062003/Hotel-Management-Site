"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@sanity";
exports.ids = ["vendor-chunks/@sanity"];
exports.modules = {

/***/ "(rsc)/./node_modules/@sanity/uuid/lib/esm/uuid.js":
/*!***************************************************!*\
  !*** ./node_modules/@sanity/uuid/lib/esm/uuid.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   uuid: () => (/* reexport safe */ uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/v4.js\");\n //# sourceMappingURL=uuid.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNhbml0eS91dWlkL2xpYi9lc20vdXVpZC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFrQyxDQUNsQyxnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ob3RlbF9tYW5hZ2VtZW50Ly4vbm9kZV9tb2R1bGVzL0BzYW5pdHkvdXVpZC9saWIvZXNtL3V1aWQuanM/NTEwNyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyB2NCBhcyB1dWlkIH0gZnJvbSAndXVpZCc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dWlkLmpzLm1hcCJdLCJuYW1lcyI6WyJ2NCIsInV1aWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sanity/uuid/lib/esm/uuid.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sanity/eventsource/node.js":
/*!**************************************************!*\
  !*** ./node_modules/@sanity/eventsource/node.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = __webpack_require__(/*! eventsource */ \"(rsc)/./node_modules/eventsource/lib/eventsource.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNhbml0eS9ldmVudHNvdXJjZS9ub2RlLmpzIiwibWFwcGluZ3MiOiI7QUFBQUEsOEdBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaG90ZWxfbWFuYWdlbWVudC8uL25vZGVfbW9kdWxlcy9Ac2FuaXR5L2V2ZW50c291cmNlL25vZGUuanM/ZDg4OSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJ2V2ZW50c291cmNlJylcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sanity/eventsource/node.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sanity/client/dist/_chunks/browserMiddleware-zDVeirri.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@sanity/client/dist/_chunks/browserMiddleware-zDVeirri.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BasePatch: () => (/* binding */ BasePatch),\n/* harmony export */   BaseTransaction: () => (/* binding */ BaseTransaction),\n/* harmony export */   ClientError: () => (/* binding */ ClientError),\n/* harmony export */   ObservablePatch: () => (/* binding */ ObservablePatch),\n/* harmony export */   ObservableSanityClient: () => (/* binding */ ObservableSanityClient),\n/* harmony export */   ObservableTransaction: () => (/* binding */ ObservableTransaction),\n/* harmony export */   Patch: () => (/* binding */ Patch),\n/* harmony export */   SanityClient: () => (/* binding */ SanityClient),\n/* harmony export */   ServerError: () => (/* binding */ ServerError),\n/* harmony export */   Transaction: () => (/* binding */ Transaction),\n/* harmony export */   b: () => (/* binding */ b),\n/* harmony export */   defineCreateClientExports: () => (/* binding */ defineCreateClientExports),\n/* harmony export */   envMiddleware: () => (/* binding */ envMiddleware),\n/* harmony export */   printNoDefaultExport: () => (/* binding */ printNoDefaultExport),\n/* harmony export */   vercelStegaCleanAll: () => (/* binding */ vercelStegaCleanAll)\n/* harmony export */ });\n/* harmony import */ var get_it__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! get-it */ \"(rsc)/./node_modules/get-it/dist/index.react-server.js\");\n/* harmony import */ var get_it_middleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! get-it/middleware */ \"(rsc)/./node_modules/get-it/dist/middleware.browser.js\");\n/* harmony import */ var _barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! __barrel_optimize__?names=Observable,from,lastValueFrom!=!rxjs */ \"(rsc)/./node_modules/rxjs/dist/esm5/internal/Observable.js\");\n/* harmony import */ var _barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=Observable,from,lastValueFrom!=!rxjs */ \"(rsc)/./node_modules/rxjs/dist/esm5/internal/observable/from.js\");\n/* harmony import */ var _barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=Observable,from,lastValueFrom!=!rxjs */ \"(rsc)/./node_modules/rxjs/dist/esm5/internal/lastValueFrom.js\");\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ \"(rsc)/./node_modules/rxjs/dist/cjs/operators/index.js\");\n\n\n\n\nconst MAX_ITEMS_IN_ERROR_MESSAGE = 5;\nclass ClientError extends Error {\n    constructor(res){\n        const props = extractErrorProps(res);\n        super(props.message);\n        this.statusCode = 400;\n        Object.assign(this, props);\n    }\n}\nclass ServerError extends Error {\n    constructor(res){\n        const props = extractErrorProps(res);\n        super(props.message);\n        this.statusCode = 500;\n        Object.assign(this, props);\n    }\n}\nfunction extractErrorProps(res) {\n    const body = res.body;\n    const props = {\n        response: res,\n        statusCode: res.statusCode,\n        responseBody: stringifyBody(body, res),\n        message: \"\",\n        details: void 0\n    };\n    if (body.error && body.message) {\n        props.message = \"\".concat(body.error, \" - \").concat(body.message);\n        return props;\n    }\n    if (isMutationError(body)) {\n        const allItems = body.error.items || [];\n        const items = allItems.slice(0, MAX_ITEMS_IN_ERROR_MESSAGE).map((item)=>{\n            var _a;\n            return (_a = item.error) == null ? void 0 : _a.description;\n        }).filter(Boolean);\n        let itemsStr = items.length ? \":\\n- \".concat(items.join(\"\\n- \")) : \"\";\n        if (allItems.length > MAX_ITEMS_IN_ERROR_MESSAGE) {\n            itemsStr += \"\\n...and \".concat(allItems.length - MAX_ITEMS_IN_ERROR_MESSAGE, \" more\");\n        }\n        props.message = \"\".concat(body.error.description).concat(itemsStr);\n        props.details = body.error;\n        return props;\n    }\n    if (body.error && body.error.description) {\n        props.message = body.error.description;\n        props.details = body.error;\n        return props;\n    }\n    props.message = body.error || body.message || httpErrorMessage(res);\n    return props;\n}\nfunction isMutationError(body) {\n    return isPlainObject(body) && isPlainObject(body.error) && body.error.type === \"mutationError\" && typeof body.error.description === \"string\";\n}\nfunction isPlainObject(obj) {\n    return typeof obj === \"object\" && obj !== null && !Array.isArray(obj);\n}\nfunction httpErrorMessage(res) {\n    const statusMessage = res.statusMessage ? \" \".concat(res.statusMessage) : \"\";\n    return \"\".concat(res.method, \"-request to \").concat(res.url, \" resulted in HTTP \").concat(res.statusCode).concat(statusMessage);\n}\nfunction stringifyBody(body, res) {\n    const contentType = (res.headers[\"content-type\"] || \"\").toLowerCase();\n    const isJson = contentType.indexOf(\"application/json\") !== -1;\n    return isJson ? JSON.stringify(body, null, 2) : body;\n}\nconst httpError = {\n    onResponse: (res)=>{\n        if (res.statusCode >= 500) {\n            throw new ServerError(res);\n        } else if (res.statusCode >= 400) {\n            throw new ClientError(res);\n        }\n        return res;\n    }\n};\nconst printWarnings = {\n    onResponse: (res)=>{\n        const warn = res.headers[\"x-sanity-warning\"];\n        const warnings = Array.isArray(warn) ? warn : [\n            warn\n        ];\n        warnings.filter(Boolean).forEach((msg)=>console.warn(msg));\n        return res;\n    }\n};\nfunction defineHttpRequest(envMiddleware, { maxRetries = 5, retryDelay }) {\n    const request = (0,get_it__WEBPACK_IMPORTED_MODULE_0__.getIt)([\n        maxRetries > 0 ? (0,get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.retry)({\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            retryDelay,\n            // This option is typed incorrectly in get-it.\n            maxRetries,\n            shouldRetry\n        }) : {},\n        ...envMiddleware,\n        printWarnings,\n        (0,get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.jsonRequest)(),\n        (0,get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.jsonResponse)(),\n        (0,get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.progress)(),\n        httpError,\n        (0,get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.observable)({\n            implementation: _barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable\n        })\n    ]);\n    function httpRequest(options, requester = request) {\n        return requester({\n            maxRedirects: 0,\n            ...options\n        });\n    }\n    httpRequest.defaultRequester = request;\n    return httpRequest;\n}\nfunction shouldRetry(err, attempt, options) {\n    const isSafe = options.method === \"GET\" || options.method === \"HEAD\";\n    const uri = options.uri || options.url;\n    const isQuery = uri.startsWith(\"/data/query\");\n    const isRetriableResponse = err.response && (err.response.statusCode === 429 || err.response.statusCode === 502 || err.response.statusCode === 503);\n    if ((isSafe || isQuery) && isRetriableResponse) return true;\n    return get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.retry.shouldRetry(err, attempt, options);\n}\nfunction getSelection(sel) {\n    if (typeof sel === \"string\" || Array.isArray(sel)) {\n        return {\n            id: sel\n        };\n    }\n    if (typeof sel === \"object\" && sel !== null && \"query\" in sel && typeof sel.query === \"string\") {\n        return \"params\" in sel && typeof sel.params === \"object\" && sel.params !== null ? {\n            query: sel.query,\n            params: sel.params\n        } : {\n            query: sel.query\n        };\n    }\n    const selectionOpts = [\n        \"* Document ID (<docId>)\",\n        \"* Array of document IDs\",\n        \"* Object containing `query`\"\n    ].join(\"\\n\");\n    throw new Error(\"Unknown selection - must be one of:\\n\\n\".concat(selectionOpts));\n}\nconst VALID_ASSET_TYPES = [\n    \"image\",\n    \"file\"\n];\nconst VALID_INSERT_LOCATIONS = [\n    \"before\",\n    \"after\",\n    \"replace\"\n];\nconst dataset = (name)=>{\n    if (!/^(~[a-z0-9]{1}[-\\w]{0,63}|[a-z0-9]{1}[-\\w]{0,63})$/.test(name)) {\n        throw new Error(\"Datasets can only contain lowercase characters, numbers, underscores and dashes, and start with tilde, and be maximum 64 characters\");\n    }\n};\nconst projectId = (id)=>{\n    if (!/^[-a-z0-9]+$/i.test(id)) {\n        throw new Error(\"`projectId` can only contain only a-z, 0-9 and dashes\");\n    }\n};\nconst validateAssetType = (type)=>{\n    if (VALID_ASSET_TYPES.indexOf(type) === -1) {\n        throw new Error(\"Invalid asset type: \".concat(type, \". Must be one of \").concat(VALID_ASSET_TYPES.join(\", \")));\n    }\n};\nconst validateObject = (op, val)=>{\n    if (val === null || typeof val !== \"object\" || Array.isArray(val)) {\n        throw new Error(\"\".concat(op, \"() takes an object of properties\"));\n    }\n};\nconst validateDocumentId = (op, id)=>{\n    if (typeof id !== \"string\" || !/^[a-z0-9_][a-z0-9_.-]{0,127}$/i.test(id) || id.includes(\"..\")) {\n        throw new Error(\"\".concat(op, '(): \"').concat(id, '\" is not a valid document ID'));\n    }\n};\nconst requireDocumentId = (op, doc)=>{\n    if (!doc._id) {\n        throw new Error(\"\".concat(op, '() requires that the document contains an ID (\"_id\" property)'));\n    }\n    validateDocumentId(op, doc._id);\n};\nconst validateInsert = (at, selector, items)=>{\n    const signature = \"insert(at, selector, items)\";\n    if (VALID_INSERT_LOCATIONS.indexOf(at) === -1) {\n        const valid = VALID_INSERT_LOCATIONS.map((loc)=>'\"'.concat(loc, '\"')).join(\", \");\n        throw new Error(\"\".concat(signature, ' takes an \"at\"-argument which is one of: ').concat(valid));\n    }\n    if (typeof selector !== \"string\") {\n        throw new Error(\"\".concat(signature, ' takes a \"selector\"-argument which must be a string'));\n    }\n    if (!Array.isArray(items)) {\n        throw new Error(\"\".concat(signature, ' takes an \"items\"-argument which must be an array'));\n    }\n};\nconst hasDataset = (config)=>{\n    if (!config.dataset) {\n        throw new Error(\"`dataset` must be provided to perform queries\");\n    }\n    return config.dataset || \"\";\n};\nconst requestTag = (tag)=>{\n    if (typeof tag !== \"string\" || !/^[a-z0-9._-]{1,75}$/i.test(tag)) {\n        throw new Error(\"Tag can only contain alphanumeric characters, underscores, dashes and dots, and be between one and 75 characters long.\");\n    }\n    return tag;\n};\nvar __accessCheck$6 = (obj, member, msg)=>{\n    if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet$6 = (obj, member, getter)=>{\n    __accessCheck$6(obj, member, \"read from private field\");\n    return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd$6 = (obj, member, value)=>{\n    if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet$6 = (obj, member, value, setter)=>{\n    __accessCheck$6(obj, member, \"write to private field\");\n    setter ? setter.call(obj, value) : member.set(obj, value);\n    return value;\n};\nvar _client$5, _client2$5;\nclass BasePatch {\n    constructor(selection, operations = {}){\n        this.selection = selection;\n        this.operations = operations;\n    }\n    /**\n   * Sets the given attributes to the document. Does NOT merge objects.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attributes to set. To set a deep attribute, use JSONMatch, eg: \\{\"nested.prop\": \"value\"\\}\n   */ set(attrs) {\n        return this._assign(\"set\", attrs);\n    }\n    /**\n   * Sets the given attributes to the document if they are not currently set. Does NOT merge objects.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attributes to set. To set a deep attribute, use JSONMatch, eg: \\{\"nested.prop\": \"value\"\\}\n   */ setIfMissing(attrs) {\n        return this._assign(\"setIfMissing\", attrs);\n    }\n    /**\n   * Performs a \"diff-match-patch\" operation on the string attributes provided.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attributes to perform operation on. To set a deep attribute, use JSONMatch, eg: \\{\"nested.prop\": \"dmp\"\\}\n   */ diffMatchPatch(attrs) {\n        validateObject(\"diffMatchPatch\", attrs);\n        return this._assign(\"diffMatchPatch\", attrs);\n    }\n    /**\n   * Unsets the attribute paths provided.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attribute paths to unset.\n   */ unset(attrs) {\n        if (!Array.isArray(attrs)) {\n            throw new Error(\"unset(attrs) takes an array of attributes to unset, non-array given\");\n        }\n        this.operations = Object.assign({}, this.operations, {\n            unset: attrs\n        });\n        return this;\n    }\n    /**\n   * Increment a numeric value. Each entry in the argument is either an attribute or a JSON path. The value may be a positive or negative integer or floating-point value. The operation will fail if target value is not a numeric value, or doesn't exist.\n   *\n   * @param attrs - Object of attribute paths to increment, values representing the number to increment by.\n   */ inc(attrs) {\n        return this._assign(\"inc\", attrs);\n    }\n    /**\n   * Decrement a numeric value. Each entry in the argument is either an attribute or a JSON path. The value may be a positive or negative integer or floating-point value. The operation will fail if target value is not a numeric value, or doesn't exist.\n   *\n   * @param attrs - Object of attribute paths to decrement, values representing the number to decrement by.\n   */ dec(attrs) {\n        return this._assign(\"dec\", attrs);\n    }\n    /**\n   * Provides methods for modifying arrays, by inserting, appending and replacing elements via a JSONPath expression.\n   *\n   * @param at - Location to insert at, relative to the given selector, or 'replace' the matched path\n   * @param selector - JSONPath expression, eg `comments[-1]` or `blocks[_key==\"abc123\"]`\n   * @param items - Array of items to insert/replace\n   */ insert(at, selector, items) {\n        validateInsert(at, selector, items);\n        return this._assign(\"insert\", {\n            [at]: selector,\n            items\n        });\n    }\n    /**\n   * Append the given items to the array at the given JSONPath\n   *\n   * @param selector - Attribute/path to append to, eg `comments` or `person.hobbies`\n   * @param items - Array of items to append to the array\n   */ append(selector, items) {\n        return this.insert(\"after\", \"\".concat(selector, \"[-1]\"), items);\n    }\n    /**\n   * Prepend the given items to the array at the given JSONPath\n   *\n   * @param selector - Attribute/path to prepend to, eg `comments` or `person.hobbies`\n   * @param items - Array of items to prepend to the array\n   */ prepend(selector, items) {\n        return this.insert(\"before\", \"\".concat(selector, \"[0]\"), items);\n    }\n    /**\n   * Change the contents of an array by removing existing elements and/or adding new elements.\n   *\n   * @param selector - Attribute or JSONPath expression for array\n   * @param start - Index at which to start changing the array (with origin 0). If greater than the length of the array, actual starting index will be set to the length of the array. If negative, will begin that many elements from the end of the array (with origin -1) and will be set to 0 if absolute value is greater than the length of the array.x\n   * @param deleteCount - An integer indicating the number of old array elements to remove.\n   * @param items - The elements to add to the array, beginning at the start index. If you don't specify any elements, splice() will only remove elements from the array.\n   */ splice(selector, start, deleteCount, items) {\n        const delAll = typeof deleteCount === \"undefined\" || deleteCount === -1;\n        const startIndex = start < 0 ? start - 1 : start;\n        const delCount = delAll ? -1 : Math.max(0, start + deleteCount);\n        const delRange = startIndex < 0 && delCount >= 0 ? \"\" : delCount;\n        const rangeSelector = \"\".concat(selector, \"[\").concat(startIndex, \":\").concat(delRange, \"]\");\n        return this.insert(\"replace\", rangeSelector, items || []);\n    }\n    /**\n   * Adds a revision clause, preventing the document from being patched if the `_rev` property does not match the given value\n   *\n   * @param rev - Revision to lock the patch to\n   */ ifRevisionId(rev) {\n        this.operations.ifRevisionID = rev;\n        return this;\n    }\n    /**\n   * Return a plain JSON representation of the patch\n   */ serialize() {\n        return {\n            ...getSelection(this.selection),\n            ...this.operations\n        };\n    }\n    /**\n   * Return a plain JSON representation of the patch\n   */ toJSON() {\n        return this.serialize();\n    }\n    /**\n   * Clears the patch of all operations\n   */ reset() {\n        this.operations = {};\n        return this;\n    }\n    _assign(op, props, merge = true) {\n        validateObject(op, props);\n        this.operations = Object.assign({}, this.operations, {\n            [op]: Object.assign({}, merge && this.operations[op] || {}, props)\n        });\n        return this;\n    }\n    _set(op, props) {\n        return this._assign(op, props, false);\n    }\n}\nconst _ObservablePatch = class _ObservablePatch extends BasePatch {\n    constructor(selection, operations, client){\n        super(selection, operations);\n        __privateAdd$6(this, _client$5, void 0);\n        __privateSet$6(this, _client$5, client);\n    }\n    /**\n   * Clones the patch\n   */ clone() {\n        return new _ObservablePatch(this.selection, {\n            ...this.operations\n        }, __privateGet$6(this, _client$5));\n    }\n    commit(options) {\n        if (!__privateGet$6(this, _client$5)) {\n            throw new Error(\"No `client` passed to patch, either provide one or pass the patch to a clients `mutate()` method\");\n        }\n        const returnFirst = typeof this.selection === \"string\";\n        const opts = Object.assign({\n            returnFirst,\n            returnDocuments: true\n        }, options);\n        return __privateGet$6(this, _client$5).mutate({\n            patch: this.serialize()\n        }, opts);\n    }\n};\n_client$5 = new WeakMap();\nlet ObservablePatch = _ObservablePatch;\nconst _Patch = class _Patch extends BasePatch {\n    constructor(selection, operations, client){\n        super(selection, operations);\n        __privateAdd$6(this, _client2$5, void 0);\n        __privateSet$6(this, _client2$5, client);\n    }\n    /**\n   * Clones the patch\n   */ clone() {\n        return new _Patch(this.selection, {\n            ...this.operations\n        }, __privateGet$6(this, _client2$5));\n    }\n    commit(options) {\n        if (!__privateGet$6(this, _client2$5)) {\n            throw new Error(\"No `client` passed to patch, either provide one or pass the patch to a clients `mutate()` method\");\n        }\n        const returnFirst = typeof this.selection === \"string\";\n        const opts = Object.assign({\n            returnFirst,\n            returnDocuments: true\n        }, options);\n        return __privateGet$6(this, _client2$5).mutate({\n            patch: this.serialize()\n        }, opts);\n    }\n};\n_client2$5 = new WeakMap();\nlet Patch = _Patch;\nvar __accessCheck$5 = (obj, member, msg)=>{\n    if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet$5 = (obj, member, getter)=>{\n    __accessCheck$5(obj, member, \"read from private field\");\n    return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd$5 = (obj, member, value)=>{\n    if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet$5 = (obj, member, value, setter)=>{\n    __accessCheck$5(obj, member, \"write to private field\");\n    setter ? setter.call(obj, value) : member.set(obj, value);\n    return value;\n};\nvar _client$4, _client2$4;\nconst defaultMutateOptions = {\n    returnDocuments: false\n};\nclass BaseTransaction {\n    constructor(operations = [], transactionId){\n        this.operations = operations;\n        this.trxId = transactionId;\n    }\n    /**\n   * Creates a new Sanity document. If `_id` is provided and already exists, the mutation will fail. If no `_id` is given, one will automatically be generated by the database.\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param doc - Document to create. Requires a `_type` property.\n   */ create(doc) {\n        validateObject(\"create\", doc);\n        return this._add({\n            create: doc\n        });\n    }\n    /**\n   * Creates a new Sanity document. If a document with the same `_id` already exists, the create operation will be ignored.\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param doc - Document to create if it does not already exist. Requires `_id` and `_type` properties.\n   */ createIfNotExists(doc) {\n        const op = \"createIfNotExists\";\n        validateObject(op, doc);\n        requireDocumentId(op, doc);\n        return this._add({\n            [op]: doc\n        });\n    }\n    /**\n   * Creates a new Sanity document, or replaces an existing one if the same `_id` is already used.\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param doc - Document to create or replace. Requires `_id` and `_type` properties.\n   */ createOrReplace(doc) {\n        const op = \"createOrReplace\";\n        validateObject(op, doc);\n        requireDocumentId(op, doc);\n        return this._add({\n            [op]: doc\n        });\n    }\n    /**\n   * Deletes the document with the given document ID\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param documentId - Document ID to delete\n   */ delete(documentId) {\n        validateDocumentId(\"delete\", documentId);\n        return this._add({\n            delete: {\n                id: documentId\n            }\n        });\n    }\n    transactionId(id) {\n        if (!id) {\n            return this.trxId;\n        }\n        this.trxId = id;\n        return this;\n    }\n    /**\n   * Return a plain JSON representation of the transaction\n   */ serialize() {\n        return [\n            ...this.operations\n        ];\n    }\n    /**\n   * Return a plain JSON representation of the transaction\n   */ toJSON() {\n        return this.serialize();\n    }\n    /**\n   * Clears the transaction of all operations\n   */ reset() {\n        this.operations = [];\n        return this;\n    }\n    _add(mut) {\n        this.operations.push(mut);\n        return this;\n    }\n}\nconst _Transaction = class _Transaction extends BaseTransaction {\n    constructor(operations, client, transactionId){\n        super(operations, transactionId);\n        __privateAdd$5(this, _client$4, void 0);\n        __privateSet$5(this, _client$4, client);\n    }\n    /**\n   * Clones the transaction\n   */ clone() {\n        return new _Transaction([\n            ...this.operations\n        ], __privateGet$5(this, _client$4), this.trxId);\n    }\n    commit(options) {\n        if (!__privateGet$5(this, _client$4)) {\n            throw new Error(\"No `client` passed to transaction, either provide one or pass the transaction to a clients `mutate()` method\");\n        }\n        return __privateGet$5(this, _client$4).mutate(this.serialize(), Object.assign({\n            transactionId: this.trxId\n        }, defaultMutateOptions, options || {}));\n    }\n    patch(patchOrDocumentId, patchOps) {\n        const isBuilder = typeof patchOps === \"function\";\n        const isPatch = typeof patchOrDocumentId !== \"string\" && patchOrDocumentId instanceof Patch;\n        if (isPatch) {\n            return this._add({\n                patch: patchOrDocumentId.serialize()\n            });\n        }\n        if (isBuilder) {\n            const patch = patchOps(new Patch(patchOrDocumentId, {}, __privateGet$5(this, _client$4)));\n            if (!(patch instanceof Patch)) {\n                throw new Error(\"function passed to `patch()` must return the patch\");\n            }\n            return this._add({\n                patch: patch.serialize()\n            });\n        }\n        return this._add({\n            patch: {\n                id: patchOrDocumentId,\n                ...patchOps\n            }\n        });\n    }\n};\n_client$4 = new WeakMap();\nlet Transaction = _Transaction;\nconst _ObservableTransaction = class _ObservableTransaction extends BaseTransaction {\n    constructor(operations, client, transactionId){\n        super(operations, transactionId);\n        __privateAdd$5(this, _client2$4, void 0);\n        __privateSet$5(this, _client2$4, client);\n    }\n    /**\n   * Clones the transaction\n   */ clone() {\n        return new _ObservableTransaction([\n            ...this.operations\n        ], __privateGet$5(this, _client2$4), this.trxId);\n    }\n    commit(options) {\n        if (!__privateGet$5(this, _client2$4)) {\n            throw new Error(\"No `client` passed to transaction, either provide one or pass the transaction to a clients `mutate()` method\");\n        }\n        return __privateGet$5(this, _client2$4).mutate(this.serialize(), Object.assign({\n            transactionId: this.trxId\n        }, defaultMutateOptions, options || {}));\n    }\n    patch(patchOrDocumentId, patchOps) {\n        const isBuilder = typeof patchOps === \"function\";\n        const isPatch = typeof patchOrDocumentId !== \"string\" && patchOrDocumentId instanceof ObservablePatch;\n        if (isPatch) {\n            return this._add({\n                patch: patchOrDocumentId.serialize()\n            });\n        }\n        if (isBuilder) {\n            const patch = patchOps(new ObservablePatch(patchOrDocumentId, {}, __privateGet$5(this, _client2$4)));\n            if (!(patch instanceof ObservablePatch)) {\n                throw new Error(\"function passed to `patch()` must return the patch\");\n            }\n            return this._add({\n                patch: patch.serialize()\n            });\n        }\n        return this._add({\n            patch: {\n                id: patchOrDocumentId,\n                ...patchOps\n            }\n        });\n    }\n};\n_client2$4 = new WeakMap();\nlet ObservableTransaction = _ObservableTransaction;\nconst BASE_URL = \"https://www.sanity.io/help/\";\nfunction generateHelpUrl(slug) {\n    return BASE_URL + slug;\n}\nfunction once(fn) {\n    let didCall = false;\n    let returnValue;\n    return (...args)=>{\n        if (didCall) {\n            return returnValue;\n        }\n        returnValue = fn(...args);\n        didCall = true;\n        return returnValue;\n    };\n}\nconst createWarningPrinter = (message)=>// eslint-disable-next-line no-console\n    once((...args)=>console.warn(message.join(\" \"), ...args));\nconst printCdnWarning = createWarningPrinter([\n    \"Since you haven't set a value for `useCdn`, we will deliver content using our\",\n    \"global, edge-cached API-CDN. If you wish to have content delivered faster, set\",\n    \"`useCdn: false` to use the Live API. Note: You may incur higher costs using the live API.\"\n]);\nconst printCdnPreviewDraftsWarning = createWarningPrinter([\n    \"The Sanity client is configured with the `perspective` set to `previewDrafts`, which doesn't support the API-CDN.\",\n    \"The Live API will be used instead. Set `useCdn: false` in your configuration to hide this warning.\"\n]);\nconst printBrowserTokenWarning = createWarningPrinter([\n    \"You have configured Sanity client to use a token in the browser. This may cause unintentional security issues.\",\n    \"See \".concat(generateHelpUrl(\"js-client-browser-token\"), \" for more information and how to hide this warning.\")\n]);\nconst printNoApiVersionSpecifiedWarning = createWarningPrinter([\n    \"Using the Sanity client without specifying an API version is deprecated.\",\n    \"See \".concat(generateHelpUrl(\"js-client-api-version\"))\n]);\nconst printNoDefaultExport = createWarningPrinter([\n    \"The default export of @sanity/client has been deprecated. Use the named export `createClient` instead.\"\n]);\nconst defaultCdnHost = \"apicdn.sanity.io\";\nconst defaultConfig = {\n    apiHost: \"https://api.sanity.io\",\n    apiVersion: \"1\",\n    useProjectHostname: true,\n    stega: {\n        enabled: false\n    }\n};\nconst LOCALHOSTS = [\n    \"localhost\",\n    \"127.0.0.1\",\n    \"0.0.0.0\"\n];\nconst isLocal = (host)=>LOCALHOSTS.indexOf(host) !== -1;\nconst validateApiVersion = function validateApiVersion2(apiVersion) {\n    if (apiVersion === \"1\" || apiVersion === \"X\") {\n        return;\n    }\n    const apiDate = new Date(apiVersion);\n    const apiVersionValid = /^\\d{4}-\\d{2}-\\d{2}$/.test(apiVersion) && apiDate instanceof Date && apiDate.getTime() > 0;\n    if (!apiVersionValid) {\n        throw new Error(\"Invalid API version string, expected `1` or date in format `YYYY-MM-DD`\");\n    }\n};\nconst validateApiPerspective = function validateApiPerspective2(perspective) {\n    switch(perspective){\n        case \"previewDrafts\":\n        case \"published\":\n        case \"raw\":\n            return;\n        default:\n            throw new TypeError(\"Invalid API perspective string, expected `published`, `previewDrafts` or `raw`\");\n    }\n};\nconst initConfig = (config, prevConfig)=>{\n    const specifiedConfig = {\n        ...prevConfig,\n        ...config,\n        stega: {\n            ...typeof prevConfig.stega === \"boolean\" ? {\n                enabled: prevConfig.stega\n            } : prevConfig.stega || defaultConfig.stega,\n            ...typeof config.stega === \"boolean\" ? {\n                enabled: config.stega\n            } : config.stega || {}\n        }\n    };\n    if (!specifiedConfig.apiVersion) {\n        printNoApiVersionSpecifiedWarning();\n    }\n    const newConfig = {\n        ...defaultConfig,\n        ...specifiedConfig\n    };\n    const projectBased = newConfig.useProjectHostname;\n    if (typeof Promise === \"undefined\") {\n        const helpUrl = generateHelpUrl(\"js-client-promise-polyfill\");\n        throw new Error(\"No native Promise-implementation found, polyfill needed - see \".concat(helpUrl));\n    }\n    if (projectBased && !newConfig.projectId) {\n        throw new Error(\"Configuration must contain `projectId`\");\n    }\n    if (typeof newConfig.perspective === \"string\") {\n        validateApiPerspective(newConfig.perspective);\n    }\n    if (\"encodeSourceMap\" in newConfig) {\n        throw new Error(\"It looks like you're using options meant for '@sanity/preview-kit/client'. 'encodeSourceMap' is not supported in '@sanity/client'. Did you mean 'stega.enabled'?\");\n    }\n    if (\"encodeSourceMapAtPath\" in newConfig) {\n        throw new Error(\"It looks like you're using options meant for '@sanity/preview-kit/client'. 'encodeSourceMapAtPath' is not supported in '@sanity/client'. Did you mean 'stega.filter'?\");\n    }\n    if (typeof newConfig.stega.enabled !== \"boolean\") {\n        throw new Error(\"stega.enabled must be a boolean, received \".concat(newConfig.stega.enabled));\n    }\n    if (newConfig.stega.enabled && newConfig.stega.studioUrl === void 0) {\n        throw new Error(\"stega.studioUrl must be defined when stega.enabled is true\");\n    }\n    if (newConfig.stega.enabled && typeof newConfig.stega.studioUrl !== \"string\" && typeof newConfig.stega.studioUrl !== \"function\") {\n        throw new Error(\"stega.studioUrl must be a string or a function, received \".concat(newConfig.stega.studioUrl));\n    }\n    const isBrowser =  false && 0;\n    const isLocalhost = isBrowser && isLocal(window.location.hostname);\n    if (isBrowser && isLocalhost && newConfig.token && newConfig.ignoreBrowserTokenWarning !== true) {\n        printBrowserTokenWarning();\n    } else if (typeof newConfig.useCdn === \"undefined\") {\n        printCdnWarning();\n    }\n    if (projectBased) {\n        projectId(newConfig.projectId);\n    }\n    if (newConfig.dataset) {\n        dataset(newConfig.dataset);\n    }\n    if (\"requestTagPrefix\" in newConfig) {\n        newConfig.requestTagPrefix = newConfig.requestTagPrefix ? requestTag(newConfig.requestTagPrefix).replace(/\\.+$/, \"\") : void 0;\n    }\n    newConfig.apiVersion = \"\".concat(newConfig.apiVersion).replace(/^v/, \"\");\n    newConfig.isDefaultApi = newConfig.apiHost === defaultConfig.apiHost;\n    newConfig.useCdn = newConfig.useCdn !== false && !newConfig.withCredentials;\n    validateApiVersion(newConfig.apiVersion);\n    const hostParts = newConfig.apiHost.split(\"://\", 2);\n    const protocol = hostParts[0];\n    const host = hostParts[1];\n    const cdnHost = newConfig.isDefaultApi ? defaultCdnHost : host;\n    if (newConfig.useProjectHostname) {\n        newConfig.url = \"\".concat(protocol, \"://\").concat(newConfig.projectId, \".\").concat(host, \"/v\").concat(newConfig.apiVersion);\n        newConfig.cdnUrl = \"\".concat(protocol, \"://\").concat(newConfig.projectId, \".\").concat(cdnHost, \"/v\").concat(newConfig.apiVersion);\n    } else {\n        newConfig.url = \"\".concat(newConfig.apiHost, \"/v\").concat(newConfig.apiVersion);\n        newConfig.cdnUrl = newConfig.url;\n    }\n    return newConfig;\n};\nconst projectHeader = \"X-Sanity-Project-ID\";\nfunction requestOptions(config, overrides = {}) {\n    const headers = {};\n    const token = overrides.token || config.token;\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    if (!overrides.useGlobalApi && !config.useProjectHostname && config.projectId) {\n        headers[projectHeader] = config.projectId;\n    }\n    const withCredentials = Boolean(typeof overrides.withCredentials === \"undefined\" ? config.token || config.withCredentials : overrides.withCredentials);\n    const timeout = typeof overrides.timeout === \"undefined\" ? config.timeout : overrides.timeout;\n    return Object.assign({}, overrides, {\n        headers: Object.assign({}, headers, overrides.headers || {}),\n        timeout: typeof timeout === \"undefined\" ? 5 * 60 * 1e3 : timeout,\n        proxy: overrides.proxy || config.proxy,\n        json: true,\n        withCredentials,\n        fetch: typeof overrides.fetch === \"object\" && typeof config.fetch === \"object\" ? {\n            ...config.fetch,\n            ...overrides.fetch\n        } : overrides.fetch || config.fetch\n    });\n}\nvar s = {\n    0: 8203,\n    1: 8204,\n    2: 8205,\n    3: 8290,\n    4: 8291,\n    5: 8288,\n    6: 65279,\n    7: 8289,\n    8: 119155,\n    9: 119156,\n    a: 119157,\n    b: 119158,\n    c: 119159,\n    d: 119160,\n    e: 119161,\n    f: 119162\n}, c = {\n    0: 8203,\n    1: 8204,\n    2: 8205,\n    3: 65279\n}, d = new Array(4).fill(String.fromCodePoint(c[0])).join(\"\");\nfunction E(t) {\n    let e = JSON.stringify(t);\n    return `${d}${Array.from(e).map((r)=>{\n        let n = r.charCodeAt(0);\n        if (n > 255) throw new Error(`Only ASCII edit info can be encoded. Error attempting to encode ${e} on character ${r} (${n})`);\n        return Array.from(n.toString(4).padStart(4, \"0\")).map((o)=>String.fromCodePoint(c[o])).join(\"\");\n    }).join(\"\")}`;\n}\nfunction I(t) {\n    return Number.isNaN(Number(t)) ? Boolean(Date.parse(t)) : !1;\n}\nfunction x(t) {\n    try {\n        new URL(t, t.startsWith(\"/\") ? \"https://acme.com\" : void 0);\n    } catch  {\n        return !1;\n    }\n    return !0;\n}\nfunction b(t, e, r = \"auto\") {\n    return r === !0 || r === \"auto\" && (I(t) || x(t)) ? t : `${t}${E(e)}`;\n}\nObject.fromEntries(Object.entries(c).map((t)=>t.reverse()));\nObject.fromEntries(Object.entries(s).map((t)=>t.reverse()));\nvar S = `${Object.values(s).map((t)=>`\\\\u{${t.toString(16)}}`).join(\"\")}`, f = new RegExp(`[${S}]{4,}`, \"gu\");\nfunction X(t) {\n    var e;\n    return {\n        cleaned: t.replace(f, \"\"),\n        encoded: ((e = t.match(f)) == null ? void 0 : e[0]) || \"\"\n    };\n}\nfunction vercelStegaCleanAll(result) {\n    try {\n        return JSON.parse(JSON.stringify(result, (key, value)=>{\n            if (typeof value !== \"string\") return value;\n            return X(value).cleaned;\n        }));\n    } catch  {\n        return result;\n    }\n}\nconst encodeQueryString = ({ query, params = {}, options = {} })=>{\n    const searchParams = new URLSearchParams();\n    const { tag, ...opts } = options;\n    if (tag) searchParams.append(\"tag\", tag);\n    searchParams.append(\"query\", query);\n    for (const [key, value] of Object.entries(params)){\n        searchParams.append(\"$\".concat(key), JSON.stringify(value));\n    }\n    for (const [key, value] of Object.entries(opts)){\n        if (value) searchParams.append(key, \"\".concat(value));\n    }\n    return \"?\".concat(searchParams);\n};\nconst excludeFalsey = (param, defValue)=>{\n    const value = typeof param === \"undefined\" ? defValue : param;\n    return param === false ? void 0 : value;\n};\nconst getMutationQuery = (options = {})=>{\n    return {\n        dryRun: options.dryRun,\n        returnIds: true,\n        returnDocuments: excludeFalsey(options.returnDocuments, true),\n        visibility: options.visibility || \"sync\",\n        autoGenerateArrayKeys: options.autoGenerateArrayKeys,\n        skipCrossDatasetReferenceValidation: options.skipCrossDatasetReferenceValidation\n    };\n};\nconst isResponse = (event)=>event.type === \"response\";\nconst getBody = (event)=>event.body;\nconst indexBy = (docs, attr)=>docs.reduce((indexed, doc)=>{\n        indexed[attr(doc)] = doc;\n        return indexed;\n    }, /* @__PURE__ */ Object.create(null));\nconst getQuerySizeLimit = 11264;\nfunction _fetch(client, httpRequest, _stega, query, _params = {}, options = {}) {\n    const stega = \"stega\" in options ? {\n        ..._stega || {},\n        ...typeof options.stega === \"boolean\" ? {\n            enabled: options.stega\n        } : options.stega || {}\n    } : _stega;\n    const params = stega.enabled ? vercelStegaCleanAll(_params) : _params;\n    const mapResponse = options.filterResponse === false ? (res)=>res : (res)=>res.result;\n    const { cache, next, ...opts } = {\n        // Opt out of setting a `signal` on an internal `fetch` if one isn't provided.\n        // This is necessary in React Server Components to avoid opting out of Request Memoization.\n        useAbortSignal: typeof options.signal !== \"undefined\",\n        // Set `resultSourceMap' when stega is enabled, as it's required for encoding.\n        resultSourceMap: stega.enabled ? \"withKeyArraySelector\" : options.resultSourceMap,\n        ...options\n    };\n    const reqOpts = typeof cache !== \"undefined\" || typeof next !== \"undefined\" ? {\n        ...opts,\n        fetch: {\n            cache,\n            next\n        }\n    } : opts;\n    const $request = _dataRequest(client, httpRequest, \"query\", {\n        query,\n        params\n    }, reqOpts);\n    return stega.enabled ? $request.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.combineLatestWith)((0,_barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_4__.from)(__webpack_require__.e(/*! import() */ \"vendor-chunks/@sanity\").then(__webpack_require__.bind(__webpack_require__, /*! ./stegaEncodeSourceMap-gZIRaYar.js */ \"(rsc)/./node_modules/@sanity/client/dist/_chunks/stegaEncodeSourceMap-gZIRaYar.js\")).then(function(n) {\n        return n.stegaEncodeSourceMap$1;\n    }).then(({ stegaEncodeSourceMap })=>stegaEncodeSourceMap))), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(([res, stegaEncodeSourceMap])=>{\n        const result = stegaEncodeSourceMap(res.result, res.resultSourceMap, stega);\n        return mapResponse({\n            ...res,\n            result\n        });\n    })) : $request.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(mapResponse));\n}\nfunction _getDocument(client, httpRequest, id, opts = {}) {\n    const options = {\n        uri: _getDataUrl(client, \"doc\", id),\n        json: true,\n        tag: opts.tag\n    };\n    return _requestObservable(client, httpRequest, options).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.filter)(isResponse), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)((event)=>event.body.documents && event.body.documents[0]));\n}\nfunction _getDocuments(client, httpRequest, ids, opts = {}) {\n    const options = {\n        uri: _getDataUrl(client, \"doc\", ids.join(\",\")),\n        json: true,\n        tag: opts.tag\n    };\n    return _requestObservable(client, httpRequest, options).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.filter)(isResponse), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)((event)=>{\n        const indexed = indexBy(event.body.documents || [], (doc)=>doc._id);\n        return ids.map((id)=>indexed[id] || null);\n    }));\n}\nfunction _createIfNotExists(client, httpRequest, doc, options) {\n    requireDocumentId(\"createIfNotExists\", doc);\n    return _create(client, httpRequest, doc, \"createIfNotExists\", options);\n}\nfunction _createOrReplace(client, httpRequest, doc, options) {\n    requireDocumentId(\"createOrReplace\", doc);\n    return _create(client, httpRequest, doc, \"createOrReplace\", options);\n}\nfunction _delete(client, httpRequest, selection, options) {\n    return _dataRequest(client, httpRequest, \"mutate\", {\n        mutations: [\n            {\n                delete: getSelection(selection)\n            }\n        ]\n    }, options);\n}\nfunction _mutate(client, httpRequest, mutations, options) {\n    let mut;\n    if (mutations instanceof Patch || mutations instanceof ObservablePatch) {\n        mut = {\n            patch: mutations.serialize()\n        };\n    } else if (mutations instanceof Transaction || mutations instanceof ObservableTransaction) {\n        mut = mutations.serialize();\n    } else {\n        mut = mutations;\n    }\n    const muts = Array.isArray(mut) ? mut : [\n        mut\n    ];\n    const transactionId = options && options.transactionId || void 0;\n    return _dataRequest(client, httpRequest, \"mutate\", {\n        mutations: muts,\n        transactionId\n    }, options);\n}\nfunction _dataRequest(client, httpRequest, endpoint, body, options = {}) {\n    const isMutation = endpoint === \"mutate\";\n    const isQuery = endpoint === \"query\";\n    const strQuery = isMutation ? \"\" : encodeQueryString(body);\n    const useGet = !isMutation && strQuery.length < getQuerySizeLimit;\n    const stringQuery = useGet ? strQuery : \"\";\n    const returnFirst = options.returnFirst;\n    const { timeout, token, tag, headers } = options;\n    const uri = _getDataUrl(client, endpoint, stringQuery);\n    const reqOptions = {\n        method: useGet ? \"GET\" : \"POST\",\n        uri,\n        json: true,\n        body: useGet ? void 0 : body,\n        query: isMutation && getMutationQuery(options),\n        timeout,\n        headers,\n        token,\n        tag,\n        perspective: options.perspective,\n        resultSourceMap: options.resultSourceMap,\n        canUseCdn: isQuery,\n        signal: options.signal,\n        fetch: options.fetch,\n        useAbortSignal: options.useAbortSignal,\n        useCdn: options.useCdn\n    };\n    return _requestObservable(client, httpRequest, reqOptions).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.filter)(isResponse), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(getBody), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)((res)=>{\n        if (!isMutation) {\n            return res;\n        }\n        const results = res.results || [];\n        if (options.returnDocuments) {\n            return returnFirst ? results[0] && results[0].document : results.map((mut)=>mut.document);\n        }\n        const key = returnFirst ? \"documentId\" : \"documentIds\";\n        const ids = returnFirst ? results[0] && results[0].id : results.map((mut)=>mut.id);\n        return {\n            transactionId: res.transactionId,\n            results,\n            [key]: ids\n        };\n    }));\n}\nfunction _create(client, httpRequest, doc, op, options = {}) {\n    const mutation = {\n        [op]: doc\n    };\n    const opts = Object.assign({\n        returnFirst: true,\n        returnDocuments: true\n    }, options);\n    return _dataRequest(client, httpRequest, \"mutate\", {\n        mutations: [\n            mutation\n        ]\n    }, opts);\n}\nfunction _requestObservable(client, httpRequest, options) {\n    var _a, _b;\n    const uri = options.url || options.uri;\n    const config = client.config();\n    const canUseCdn = typeof options.canUseCdn === \"undefined\" ? [\n        \"GET\",\n        \"HEAD\"\n    ].indexOf(options.method || \"GET\") >= 0 && uri.indexOf(\"/data/\") === 0 : options.canUseCdn;\n    let useCdn = ((_a = options.useCdn) != null ? _a : config.useCdn) && canUseCdn;\n    const tag = options.tag && config.requestTagPrefix ? [\n        config.requestTagPrefix,\n        options.tag\n    ].join(\".\") : options.tag || config.requestTagPrefix;\n    if (tag && options.tag !== null) {\n        options.query = {\n            tag: requestTag(tag),\n            ...options.query\n        };\n    }\n    if ([\n        \"GET\",\n        \"HEAD\",\n        \"POST\"\n    ].indexOf(options.method || \"GET\") >= 0 && uri.indexOf(\"/data/query/\") === 0) {\n        const resultSourceMap = (_b = options.resultSourceMap) != null ? _b : config.resultSourceMap;\n        if (resultSourceMap !== void 0 && resultSourceMap !== false) {\n            options.query = {\n                resultSourceMap,\n                ...options.query\n            };\n        }\n        const perspective = options.perspective || config.perspective;\n        if (typeof perspective === \"string\" && perspective !== \"raw\") {\n            validateApiPerspective(perspective);\n            options.query = {\n                perspective,\n                ...options.query\n            };\n            if (perspective === \"previewDrafts\" && useCdn) {\n                useCdn = false;\n                printCdnPreviewDraftsWarning();\n            }\n        }\n    }\n    const reqOptions = requestOptions(config, Object.assign({}, options, {\n        url: _getUrl(client, uri, useCdn)\n    }));\n    const request = new _barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable((subscriber)=>httpRequest(reqOptions, config.requester).subscribe(subscriber));\n    return options.signal ? request.pipe(_withAbortSignal(options.signal)) : request;\n}\nfunction _request(client, httpRequest, options) {\n    const observable = _requestObservable(client, httpRequest, options).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.filter)((event)=>event.type === \"response\"), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)((event)=>event.body));\n    return observable;\n}\nfunction _getDataUrl(client, operation, path) {\n    const config = client.config();\n    const catalog = hasDataset(config);\n    const baseUri = \"/\".concat(operation, \"/\").concat(catalog);\n    const uri = path ? \"\".concat(baseUri, \"/\").concat(path) : baseUri;\n    return \"/data\".concat(uri).replace(/\\/($|\\?)/, \"$1\");\n}\nfunction _getUrl(client, uri, canUseCdn = false) {\n    const { url, cdnUrl } = client.config();\n    const base = canUseCdn ? cdnUrl : url;\n    return \"\".concat(base, \"/\").concat(uri.replace(/^\\//, \"\"));\n}\nfunction _withAbortSignal(signal) {\n    return (input)=>{\n        return new _barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable((observer)=>{\n            const abort = ()=>observer.error(_createAbortError(signal));\n            if (signal && signal.aborted) {\n                abort();\n                return;\n            }\n            const subscription = input.subscribe(observer);\n            signal.addEventListener(\"abort\", abort);\n            return ()=>{\n                signal.removeEventListener(\"abort\", abort);\n                subscription.unsubscribe();\n            };\n        });\n    };\n}\nconst isDomExceptionSupported = Boolean(globalThis.DOMException);\nfunction _createAbortError(signal) {\n    var _a, _b;\n    if (isDomExceptionSupported) {\n        return new DOMException((_a = signal == null ? void 0 : signal.reason) != null ? _a : \"The operation was aborted.\", \"AbortError\");\n    }\n    const error = new Error((_b = signal == null ? void 0 : signal.reason) != null ? _b : \"The operation was aborted.\");\n    error.name = \"AbortError\";\n    return error;\n}\nvar __accessCheck$4 = (obj, member, msg)=>{\n    if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet$4 = (obj, member, getter)=>{\n    __accessCheck$4(obj, member, \"read from private field\");\n    return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd$4 = (obj, member, value)=>{\n    if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet$4 = (obj, member, value, setter)=>{\n    __accessCheck$4(obj, member, \"write to private field\");\n    setter ? setter.call(obj, value) : member.set(obj, value);\n    return value;\n};\nvar _client$3, _httpRequest$4, _client2$3, _httpRequest2$4;\nclass ObservableAssetsClient {\n    constructor(client, httpRequest){\n        __privateAdd$4(this, _client$3, void 0);\n        __privateAdd$4(this, _httpRequest$4, void 0);\n        __privateSet$4(this, _client$3, client);\n        __privateSet$4(this, _httpRequest$4, httpRequest);\n    }\n    upload(assetType, body, options) {\n        return _upload(__privateGet$4(this, _client$3), __privateGet$4(this, _httpRequest$4), assetType, body, options);\n    }\n}\n_client$3 = new WeakMap();\n_httpRequest$4 = new WeakMap();\nclass AssetsClient {\n    constructor(client, httpRequest){\n        __privateAdd$4(this, _client2$3, void 0);\n        __privateAdd$4(this, _httpRequest2$4, void 0);\n        __privateSet$4(this, _client2$3, client);\n        __privateSet$4(this, _httpRequest2$4, httpRequest);\n    }\n    upload(assetType, body, options) {\n        const observable = _upload(__privateGet$4(this, _client2$3), __privateGet$4(this, _httpRequest2$4), assetType, body, options);\n        return (0,_barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_5__.lastValueFrom)(observable.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.filter)((event)=>event.type === \"response\"), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)((event)=>event.body.document)));\n    }\n}\n_client2$3 = new WeakMap();\n_httpRequest2$4 = new WeakMap();\nfunction _upload(client, httpRequest, assetType, body, opts = {}) {\n    validateAssetType(assetType);\n    let meta = opts.extract || void 0;\n    if (meta && !meta.length) {\n        meta = [\n            \"none\"\n        ];\n    }\n    const dataset = hasDataset(client.config());\n    const assetEndpoint = assetType === \"image\" ? \"images\" : \"files\";\n    const options = optionsFromFile(opts, body);\n    const { tag, label, title, description, creditLine, filename, source } = options;\n    const query = {\n        label,\n        title,\n        description,\n        filename,\n        meta,\n        creditLine\n    };\n    if (source) {\n        query.sourceId = source.id;\n        query.sourceName = source.name;\n        query.sourceUrl = source.url;\n    }\n    return _requestObservable(client, httpRequest, {\n        tag,\n        method: \"POST\",\n        timeout: options.timeout || 0,\n        uri: \"/assets/\".concat(assetEndpoint, \"/\").concat(dataset),\n        headers: options.contentType ? {\n            \"Content-Type\": options.contentType\n        } : {},\n        query,\n        body\n    });\n}\nfunction optionsFromFile(opts, file) {\n    if (typeof File === \"undefined\" || !(file instanceof File)) {\n        return opts;\n    }\n    return Object.assign({\n        filename: opts.preserveFilename === false ? void 0 : file.name,\n        contentType: file.type\n    }, opts);\n}\nvar defaults = (obj, defaults)=>Object.keys(defaults).concat(Object.keys(obj)).reduce((target, prop)=>{\n        target[prop] = typeof obj[prop] === \"undefined\" ? defaults[prop] : obj[prop];\n        return target;\n    }, {});\nconst pick = (obj, props)=>props.reduce((selection, prop)=>{\n        if (typeof obj[prop] === \"undefined\") {\n            return selection;\n        }\n        selection[prop] = obj[prop];\n        return selection;\n    }, {});\nconst MAX_URL_LENGTH = 16e3 - 1200;\nconst possibleOptions = [\n    \"includePreviousRevision\",\n    \"includeResult\",\n    \"visibility\",\n    \"effectFormat\",\n    \"tag\"\n];\nconst defaultOptions = {\n    includeResult: true\n};\nfunction _listen(query, params, opts = {}) {\n    const { url, token, withCredentials, requestTagPrefix } = this.config();\n    const tag = opts.tag && requestTagPrefix ? [\n        requestTagPrefix,\n        opts.tag\n    ].join(\".\") : opts.tag;\n    const options = {\n        ...defaults(opts, defaultOptions),\n        tag\n    };\n    const listenOpts = pick(options, possibleOptions);\n    const qs = encodeQueryString({\n        query,\n        params,\n        options: {\n            tag,\n            ...listenOpts\n        }\n    });\n    const uri = \"\".concat(url).concat(_getDataUrl(this, \"listen\", qs));\n    if (uri.length > MAX_URL_LENGTH) {\n        return new _barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable((observer)=>observer.error(new Error(\"Query too large for listener\")));\n    }\n    const listenFor = options.events ? options.events : [\n        \"mutation\"\n    ];\n    const shouldEmitReconnect = listenFor.indexOf(\"reconnect\") !== -1;\n    const esOptions = {};\n    if (token || withCredentials) {\n        esOptions.withCredentials = true;\n    }\n    if (token) {\n        esOptions.headers = {\n            Authorization: \"Bearer \".concat(token)\n        };\n    }\n    return new _barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable((observer)=>{\n        let es;\n        getEventSource().then((eventSource)=>{\n            es = eventSource;\n        }).catch((reason)=>{\n            observer.error(reason);\n            stop();\n        });\n        let reconnectTimer;\n        let stopped = false;\n        function onError() {\n            if (stopped) {\n                return;\n            }\n            emitReconnect();\n            if (stopped) {\n                return;\n            }\n            if (es.readyState === es.CLOSED) {\n                unsubscribe();\n                clearTimeout(reconnectTimer);\n                reconnectTimer = setTimeout(open, 100);\n            }\n        }\n        function onChannelError(err) {\n            observer.error(cooerceError(err));\n        }\n        function onMessage(evt) {\n            const event = parseEvent(evt);\n            return event instanceof Error ? observer.error(event) : observer.next(event);\n        }\n        function onDisconnect() {\n            stopped = true;\n            unsubscribe();\n            observer.complete();\n        }\n        function unsubscribe() {\n            if (!es) return;\n            es.removeEventListener(\"error\", onError);\n            es.removeEventListener(\"channelError\", onChannelError);\n            es.removeEventListener(\"disconnect\", onDisconnect);\n            listenFor.forEach((type)=>es.removeEventListener(type, onMessage));\n            es.close();\n        }\n        function emitReconnect() {\n            if (shouldEmitReconnect) {\n                observer.next({\n                    type: \"reconnect\"\n                });\n            }\n        }\n        async function getEventSource() {\n            const { default: EventSource } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@sanity\"), __webpack_require__.e(\"vendor-chunks/eventsource\")]).then(__webpack_require__.t.bind(__webpack_require__, /*! @sanity/eventsource */ \"(rsc)/./node_modules/@sanity/eventsource/node.js\", 19));\n            const evs = new EventSource(uri, esOptions);\n            evs.addEventListener(\"error\", onError);\n            evs.addEventListener(\"channelError\", onChannelError);\n            evs.addEventListener(\"disconnect\", onDisconnect);\n            listenFor.forEach((type)=>evs.addEventListener(type, onMessage));\n            return evs;\n        }\n        function open() {\n            getEventSource().then((eventSource)=>{\n                es = eventSource;\n            }).catch((reason)=>{\n                observer.error(reason);\n                stop();\n            });\n        }\n        function stop() {\n            stopped = true;\n            unsubscribe();\n        }\n        return stop;\n    });\n}\nfunction parseEvent(event) {\n    try {\n        const data = event.data && JSON.parse(event.data) || {};\n        return Object.assign({\n            type: event.type\n        }, data);\n    } catch (err) {\n        return err;\n    }\n}\nfunction cooerceError(err) {\n    if (err instanceof Error) {\n        return err;\n    }\n    const evt = parseEvent(err);\n    return evt instanceof Error ? evt : new Error(extractErrorMessage(evt));\n}\nfunction extractErrorMessage(err) {\n    if (!err.error) {\n        return err.message || \"Unknown listener error\";\n    }\n    if (err.error.description) {\n        return err.error.description;\n    }\n    return typeof err.error === \"string\" ? err.error : JSON.stringify(err.error, null, 2);\n}\nvar __accessCheck$3 = (obj, member, msg)=>{\n    if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet$3 = (obj, member, getter)=>{\n    __accessCheck$3(obj, member, \"read from private field\");\n    return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd$3 = (obj, member, value)=>{\n    if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet$3 = (obj, member, value, setter)=>{\n    __accessCheck$3(obj, member, \"write to private field\");\n    setter ? setter.call(obj, value) : member.set(obj, value);\n    return value;\n};\nvar _client$2, _httpRequest$3, _client2$2, _httpRequest2$3;\nclass ObservableDatasetsClient {\n    constructor(client, httpRequest){\n        __privateAdd$3(this, _client$2, void 0);\n        __privateAdd$3(this, _httpRequest$3, void 0);\n        __privateSet$3(this, _client$2, client);\n        __privateSet$3(this, _httpRequest$3, httpRequest);\n    }\n    /**\n   * Create a new dataset with the given name\n   *\n   * @param name - Name of the dataset to create\n   * @param options - Options for the dataset\n   */ create(name, options) {\n        return _modify(__privateGet$3(this, _client$2), __privateGet$3(this, _httpRequest$3), \"PUT\", name, options);\n    }\n    /**\n   * Edit a dataset with the given name\n   *\n   * @param name - Name of the dataset to edit\n   * @param options - New options for the dataset\n   */ edit(name, options) {\n        return _modify(__privateGet$3(this, _client$2), __privateGet$3(this, _httpRequest$3), \"PATCH\", name, options);\n    }\n    /**\n   * Delete a dataset with the given name\n   *\n   * @param name - Name of the dataset to delete\n   */ delete(name) {\n        return _modify(__privateGet$3(this, _client$2), __privateGet$3(this, _httpRequest$3), \"DELETE\", name);\n    }\n    /**\n   * Fetch a list of datasets for the configured project\n   */ list() {\n        return _request(__privateGet$3(this, _client$2), __privateGet$3(this, _httpRequest$3), {\n            uri: \"/datasets\",\n            tag: null\n        });\n    }\n}\n_client$2 = new WeakMap();\n_httpRequest$3 = new WeakMap();\nclass DatasetsClient {\n    constructor(client, httpRequest){\n        __privateAdd$3(this, _client2$2, void 0);\n        __privateAdd$3(this, _httpRequest2$3, void 0);\n        __privateSet$3(this, _client2$2, client);\n        __privateSet$3(this, _httpRequest2$3, httpRequest);\n    }\n    /**\n   * Create a new dataset with the given name\n   *\n   * @param name - Name of the dataset to create\n   * @param options - Options for the dataset\n   */ create(name, options) {\n        return (0,_barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_5__.lastValueFrom)(_modify(__privateGet$3(this, _client2$2), __privateGet$3(this, _httpRequest2$3), \"PUT\", name, options));\n    }\n    /**\n   * Edit a dataset with the given name\n   *\n   * @param name - Name of the dataset to edit\n   * @param options - New options for the dataset\n   */ edit(name, options) {\n        return (0,_barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_5__.lastValueFrom)(_modify(__privateGet$3(this, _client2$2), __privateGet$3(this, _httpRequest2$3), \"PATCH\", name, options));\n    }\n    /**\n   * Delete a dataset with the given name\n   *\n   * @param name - Name of the dataset to delete\n   */ delete(name) {\n        return (0,_barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_5__.lastValueFrom)(_modify(__privateGet$3(this, _client2$2), __privateGet$3(this, _httpRequest2$3), \"DELETE\", name));\n    }\n    /**\n   * Fetch a list of datasets for the configured project\n   */ list() {\n        return (0,_barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_5__.lastValueFrom)(_request(__privateGet$3(this, _client2$2), __privateGet$3(this, _httpRequest2$3), {\n            uri: \"/datasets\",\n            tag: null\n        }));\n    }\n}\n_client2$2 = new WeakMap();\n_httpRequest2$3 = new WeakMap();\nfunction _modify(client, httpRequest, method, name, options) {\n    dataset(name);\n    return _request(client, httpRequest, {\n        method,\n        uri: \"/datasets/\".concat(name),\n        body: options,\n        tag: null\n    });\n}\nvar __accessCheck$2 = (obj, member, msg)=>{\n    if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet$2 = (obj, member, getter)=>{\n    __accessCheck$2(obj, member, \"read from private field\");\n    return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd$2 = (obj, member, value)=>{\n    if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet$2 = (obj, member, value, setter)=>{\n    __accessCheck$2(obj, member, \"write to private field\");\n    setter ? setter.call(obj, value) : member.set(obj, value);\n    return value;\n};\nvar _client$1, _httpRequest$2, _client2$1, _httpRequest2$2;\nclass ObservableProjectsClient {\n    constructor(client, httpRequest){\n        __privateAdd$2(this, _client$1, void 0);\n        __privateAdd$2(this, _httpRequest$2, void 0);\n        __privateSet$2(this, _client$1, client);\n        __privateSet$2(this, _httpRequest$2, httpRequest);\n    }\n    list(options) {\n        const uri = (options == null ? void 0 : options.includeMembers) === false ? \"/projects?includeMembers=false\" : \"/projects\";\n        return _request(__privateGet$2(this, _client$1), __privateGet$2(this, _httpRequest$2), {\n            uri\n        });\n    }\n    /**\n   * Fetch a project by project ID\n   *\n   * @param projectId - ID of the project to fetch\n   */ getById(projectId) {\n        return _request(__privateGet$2(this, _client$1), __privateGet$2(this, _httpRequest$2), {\n            uri: \"/projects/\".concat(projectId)\n        });\n    }\n}\n_client$1 = new WeakMap();\n_httpRequest$2 = new WeakMap();\nclass ProjectsClient {\n    constructor(client, httpRequest){\n        __privateAdd$2(this, _client2$1, void 0);\n        __privateAdd$2(this, _httpRequest2$2, void 0);\n        __privateSet$2(this, _client2$1, client);\n        __privateSet$2(this, _httpRequest2$2, httpRequest);\n    }\n    list(options) {\n        const uri = (options == null ? void 0 : options.includeMembers) === false ? \"/projects?includeMembers=false\" : \"/projects\";\n        return (0,_barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_5__.lastValueFrom)(_request(__privateGet$2(this, _client2$1), __privateGet$2(this, _httpRequest2$2), {\n            uri\n        }));\n    }\n    /**\n   * Fetch a project by project ID\n   *\n   * @param projectId - ID of the project to fetch\n   */ getById(projectId) {\n        return (0,_barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_5__.lastValueFrom)(_request(__privateGet$2(this, _client2$1), __privateGet$2(this, _httpRequest2$2), {\n            uri: \"/projects/\".concat(projectId)\n        }));\n    }\n}\n_client2$1 = new WeakMap();\n_httpRequest2$2 = new WeakMap();\nvar __accessCheck$1 = (obj, member, msg)=>{\n    if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet$1 = (obj, member, getter)=>{\n    __accessCheck$1(obj, member, \"read from private field\");\n    return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd$1 = (obj, member, value)=>{\n    if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet$1 = (obj, member, value, setter)=>{\n    __accessCheck$1(obj, member, \"write to private field\");\n    setter ? setter.call(obj, value) : member.set(obj, value);\n    return value;\n};\nvar _client, _httpRequest$1, _client2, _httpRequest2$1;\nclass ObservableUsersClient {\n    constructor(client, httpRequest){\n        __privateAdd$1(this, _client, void 0);\n        __privateAdd$1(this, _httpRequest$1, void 0);\n        __privateSet$1(this, _client, client);\n        __privateSet$1(this, _httpRequest$1, httpRequest);\n    }\n    /**\n   * Fetch a user by user ID\n   *\n   * @param id - User ID of the user to fetch. If `me` is provided, a minimal response including the users role is returned.\n   */ getById(id) {\n        return _request(__privateGet$1(this, _client), __privateGet$1(this, _httpRequest$1), {\n            uri: \"/users/\".concat(id)\n        });\n    }\n}\n_client = new WeakMap();\n_httpRequest$1 = new WeakMap();\nclass UsersClient {\n    constructor(client, httpRequest){\n        __privateAdd$1(this, _client2, void 0);\n        __privateAdd$1(this, _httpRequest2$1, void 0);\n        __privateSet$1(this, _client2, client);\n        __privateSet$1(this, _httpRequest2$1, httpRequest);\n    }\n    /**\n   * Fetch a user by user ID\n   *\n   * @param id - User ID of the user to fetch. If `me` is provided, a minimal response including the users role is returned.\n   */ getById(id) {\n        return (0,_barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_5__.lastValueFrom)(_request(__privateGet$1(this, _client2), __privateGet$1(this, _httpRequest2$1), {\n            uri: \"/users/\".concat(id)\n        }));\n    }\n}\n_client2 = new WeakMap();\n_httpRequest2$1 = new WeakMap();\nvar __accessCheck = (obj, member, msg)=>{\n    if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter)=>{\n    __accessCheck(obj, member, \"read from private field\");\n    return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value)=>{\n    if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter)=>{\n    __accessCheck(obj, member, \"write to private field\");\n    setter ? setter.call(obj, value) : member.set(obj, value);\n    return value;\n};\nvar _clientConfig, _httpRequest, _clientConfig2, _httpRequest2;\nconst _ObservableSanityClient = class _ObservableSanityClient {\n    constructor(httpRequest, config = defaultConfig){\n        /**\n     * Private properties\n     */ __privateAdd(this, _clientConfig, void 0);\n        __privateAdd(this, _httpRequest, void 0);\n        /**\n     * Instance properties\n     */ this.listen = _listen;\n        this.config(config);\n        __privateSet(this, _httpRequest, httpRequest);\n        this.assets = new ObservableAssetsClient(this, __privateGet(this, _httpRequest));\n        this.datasets = new ObservableDatasetsClient(this, __privateGet(this, _httpRequest));\n        this.projects = new ObservableProjectsClient(this, __privateGet(this, _httpRequest));\n        this.users = new ObservableUsersClient(this, __privateGet(this, _httpRequest));\n    }\n    /**\n   * Clone the client - returns a new instance\n   */ clone() {\n        return new _ObservableSanityClient(__privateGet(this, _httpRequest), this.config());\n    }\n    config(newConfig) {\n        if (newConfig === void 0) {\n            return {\n                ...__privateGet(this, _clientConfig)\n            };\n        }\n        if (__privateGet(this, _clientConfig) && __privateGet(this, _clientConfig).allowReconfigure === false) {\n            throw new Error(\"Existing client instance cannot be reconfigured - use `withConfig(newConfig)` to return a new client\");\n        }\n        __privateSet(this, _clientConfig, initConfig(newConfig, __privateGet(this, _clientConfig) || {}));\n        return this;\n    }\n    /**\n   * Clone the client with a new (partial) configuration.\n   *\n   * @param newConfig - New client configuration properties, shallowly merged with existing configuration\n   */ withConfig(newConfig) {\n        const thisConfig = this.config();\n        return new _ObservableSanityClient(__privateGet(this, _httpRequest), {\n            ...thisConfig,\n            ...newConfig,\n            stega: {\n                ...thisConfig.stega || {},\n                ...typeof (newConfig == null ? void 0 : newConfig.stega) === \"boolean\" ? {\n                    enabled: newConfig.stega\n                } : (newConfig == null ? void 0 : newConfig.stega) || {}\n            }\n        });\n    }\n    fetch(query, params, options) {\n        return _fetch(this, __privateGet(this, _httpRequest), __privateGet(this, _clientConfig).stega, query, params, options);\n    }\n    /**\n   * Fetch a single document with the given ID.\n   *\n   * @param id - Document ID to fetch\n   * @param options - Request options\n   */ getDocument(id, options) {\n        return _getDocument(this, __privateGet(this, _httpRequest), id, options);\n    }\n    /**\n   * Fetch multiple documents in one request.\n   * Should be used sparingly - performing a query is usually a better option.\n   * The order/position of documents is preserved based on the original array of IDs.\n   * If any of the documents are missing, they will be replaced by a `null` entry in the returned array\n   *\n   * @param ids - Document IDs to fetch\n   * @param options - Request options\n   */ getDocuments(ids, options) {\n        return _getDocuments(this, __privateGet(this, _httpRequest), ids, options);\n    }\n    create(document, options) {\n        return _create(this, __privateGet(this, _httpRequest), document, \"create\", options);\n    }\n    createIfNotExists(document, options) {\n        return _createIfNotExists(this, __privateGet(this, _httpRequest), document, options);\n    }\n    createOrReplace(document, options) {\n        return _createOrReplace(this, __privateGet(this, _httpRequest), document, options);\n    }\n    delete(selection, options) {\n        return _delete(this, __privateGet(this, _httpRequest), selection, options);\n    }\n    mutate(operations, options) {\n        return _mutate(this, __privateGet(this, _httpRequest), operations, options);\n    }\n    /**\n   * Create a new buildable patch of operations to perform\n   *\n   * @param selection - Document ID, an array of document IDs, or an object with `query` and optional `params`, defining which document(s) to patch\n   * @param operations - Optional object of patch operations to initialize the patch instance with\n   * @returns Patch instance - call `.commit()` to perform the operations defined\n   */ patch(selection, operations) {\n        return new ObservablePatch(selection, operations, this);\n    }\n    /**\n   * Create a new transaction of mutations\n   *\n   * @param operations - Optional array of mutation operations to initialize the transaction instance with\n   */ transaction(operations) {\n        return new ObservableTransaction(operations, this);\n    }\n    /**\n   * Perform an HTTP request against the Sanity API\n   *\n   * @param options - Request options\n   */ request(options) {\n        return _request(this, __privateGet(this, _httpRequest), options);\n    }\n    /**\n   * Get a Sanity API URL for the URI provided\n   *\n   * @param uri - URI/path to build URL for\n   * @param canUseCdn - Whether or not to allow using the API CDN for this route\n   */ getUrl(uri, canUseCdn) {\n        return _getUrl(this, uri, canUseCdn);\n    }\n    /**\n   * Get a Sanity API URL for the data operation and path provided\n   *\n   * @param operation - Data operation (eg `query`, `mutate`, `listen` or similar)\n   * @param path - Path to append after the operation\n   */ getDataUrl(operation, path) {\n        return _getDataUrl(this, operation, path);\n    }\n};\n_clientConfig = new WeakMap();\n_httpRequest = new WeakMap();\nlet ObservableSanityClient = _ObservableSanityClient;\nconst _SanityClient = class _SanityClient {\n    constructor(httpRequest, config = defaultConfig){\n        /**\n     * Private properties\n     */ __privateAdd(this, _clientConfig2, void 0);\n        __privateAdd(this, _httpRequest2, void 0);\n        /**\n     * Instance properties\n     */ this.listen = _listen;\n        this.config(config);\n        __privateSet(this, _httpRequest2, httpRequest);\n        this.assets = new AssetsClient(this, __privateGet(this, _httpRequest2));\n        this.datasets = new DatasetsClient(this, __privateGet(this, _httpRequest2));\n        this.projects = new ProjectsClient(this, __privateGet(this, _httpRequest2));\n        this.users = new UsersClient(this, __privateGet(this, _httpRequest2));\n        this.observable = new ObservableSanityClient(httpRequest, config);\n    }\n    /**\n   * Clone the client - returns a new instance\n   */ clone() {\n        return new _SanityClient(__privateGet(this, _httpRequest2), this.config());\n    }\n    config(newConfig) {\n        if (newConfig === void 0) {\n            return {\n                ...__privateGet(this, _clientConfig2)\n            };\n        }\n        if (__privateGet(this, _clientConfig2) && __privateGet(this, _clientConfig2).allowReconfigure === false) {\n            throw new Error(\"Existing client instance cannot be reconfigured - use `withConfig(newConfig)` to return a new client\");\n        }\n        if (this.observable) {\n            this.observable.config(newConfig);\n        }\n        __privateSet(this, _clientConfig2, initConfig(newConfig, __privateGet(this, _clientConfig2) || {}));\n        return this;\n    }\n    /**\n   * Clone the client with a new (partial) configuration.\n   *\n   * @param newConfig - New client configuration properties, shallowly merged with existing configuration\n   */ withConfig(newConfig) {\n        const thisConfig = this.config();\n        return new _SanityClient(__privateGet(this, _httpRequest2), {\n            ...thisConfig,\n            ...newConfig,\n            stega: {\n                ...thisConfig.stega || {},\n                ...typeof (newConfig == null ? void 0 : newConfig.stega) === \"boolean\" ? {\n                    enabled: newConfig.stega\n                } : (newConfig == null ? void 0 : newConfig.stega) || {}\n            }\n        });\n    }\n    fetch(query, params, options) {\n        return (0,_barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_5__.lastValueFrom)(_fetch(this, __privateGet(this, _httpRequest2), __privateGet(this, _clientConfig2).stega, query, params, options));\n    }\n    /**\n   * Fetch a single document with the given ID.\n   *\n   * @param id - Document ID to fetch\n   * @param options - Request options\n   */ getDocument(id, options) {\n        return (0,_barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_5__.lastValueFrom)(_getDocument(this, __privateGet(this, _httpRequest2), id, options));\n    }\n    /**\n   * Fetch multiple documents in one request.\n   * Should be used sparingly - performing a query is usually a better option.\n   * The order/position of documents is preserved based on the original array of IDs.\n   * If any of the documents are missing, they will be replaced by a `null` entry in the returned array\n   *\n   * @param ids - Document IDs to fetch\n   * @param options - Request options\n   */ getDocuments(ids, options) {\n        return (0,_barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_5__.lastValueFrom)(_getDocuments(this, __privateGet(this, _httpRequest2), ids, options));\n    }\n    create(document, options) {\n        return (0,_barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_5__.lastValueFrom)(_create(this, __privateGet(this, _httpRequest2), document, \"create\", options));\n    }\n    createIfNotExists(document, options) {\n        return (0,_barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_5__.lastValueFrom)(_createIfNotExists(this, __privateGet(this, _httpRequest2), document, options));\n    }\n    createOrReplace(document, options) {\n        return (0,_barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_5__.lastValueFrom)(_createOrReplace(this, __privateGet(this, _httpRequest2), document, options));\n    }\n    delete(selection, options) {\n        return (0,_barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_5__.lastValueFrom)(_delete(this, __privateGet(this, _httpRequest2), selection, options));\n    }\n    mutate(operations, options) {\n        return (0,_barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_5__.lastValueFrom)(_mutate(this, __privateGet(this, _httpRequest2), operations, options));\n    }\n    /**\n   * Create a new buildable patch of operations to perform\n   *\n   * @param selection - Document ID, an array of document IDs, or an object with `query` and optional `params`, defining which document(s) to patch\n   * @param operations - Optional object of patch operations to initialize the patch instance with\n   * @returns Patch instance - call `.commit()` to perform the operations defined\n   */ patch(documentId, operations) {\n        return new Patch(documentId, operations, this);\n    }\n    /**\n   * Create a new transaction of mutations\n   *\n   * @param operations - Optional array of mutation operations to initialize the transaction instance with\n   */ transaction(operations) {\n        return new Transaction(operations, this);\n    }\n    /**\n   * Perform a request against the Sanity API\n   * NOTE: Only use this for Sanity API endpoints, not for your own APIs!\n   *\n   * @param options - Request options\n   * @returns Promise resolving to the response body\n   */ request(options) {\n        return (0,_barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_5__.lastValueFrom)(_request(this, __privateGet(this, _httpRequest2), options));\n    }\n    /**\n   * Perform an HTTP request a `/data` sub-endpoint\n   * NOTE: Considered internal, thus marked as deprecated. Use `request` instead.\n   *\n   * @deprecated - Use `request()` or your own HTTP library instead\n   * @param endpoint - Endpoint to hit (mutate, query etc)\n   * @param body - Request body\n   * @param options - Request options\n   * @internal\n   */ dataRequest(endpoint, body, options) {\n        return (0,_barrel_optimize_names_Observable_from_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_5__.lastValueFrom)(_dataRequest(this, __privateGet(this, _httpRequest2), endpoint, body, options));\n    }\n    /**\n   * Get a Sanity API URL for the URI provided\n   *\n   * @param uri - URI/path to build URL for\n   * @param canUseCdn - Whether or not to allow using the API CDN for this route\n   */ getUrl(uri, canUseCdn) {\n        return _getUrl(this, uri, canUseCdn);\n    }\n    /**\n   * Get a Sanity API URL for the data operation and path provided\n   *\n   * @param operation - Data operation (eg `query`, `mutate`, `listen` or similar)\n   * @param path - Path to append after the operation\n   */ getDataUrl(operation, path) {\n        return _getDataUrl(this, operation, path);\n    }\n};\n_clientConfig2 = new WeakMap();\n_httpRequest2 = new WeakMap();\nlet SanityClient = _SanityClient;\nfunction defineCreateClientExports(envMiddleware, ClassConstructor) {\n    const httpRequest = defineHttpRequest(envMiddleware, {});\n    const requester = httpRequest.defaultRequester;\n    const createClient = (config)=>new ClassConstructor(defineHttpRequest(envMiddleware, {\n            maxRetries: config.maxRetries,\n            retryDelay: config.retryDelay\n        }), config);\n    return {\n        requester,\n        createClient\n    };\n}\nvar envMiddleware = [];\n //# sourceMappingURL=browserMiddleware-zDVeirri.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sanity/client/dist/_chunks/browserMiddleware-zDVeirri.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sanity/client/dist/_chunks/stegaEncodeSourceMap-gZIRaYar.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@sanity/client/dist/_chunks/stegaEncodeSourceMap-gZIRaYar.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodeIntoResult: () => (/* binding */ encodeIntoResult),\n/* harmony export */   stegaEncodeSourceMap: () => (/* binding */ stegaEncodeSourceMap),\n/* harmony export */   stegaEncodeSourceMap$1: () => (/* binding */ stegaEncodeSourceMap$1)\n/* harmony export */ });\n/* harmony import */ var _browserMiddleware_zDVeirri_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./browserMiddleware-zDVeirri.js */ \"(rsc)/./node_modules/@sanity/client/dist/_chunks/browserMiddleware-zDVeirri.js\");\n\nconst reKeySegment = /_key\\s*==\\s*['\"](.*)['\"]/;\nfunction isKeySegment(segment) {\n    if (typeof segment === \"string\") {\n        return reKeySegment.test(segment.trim());\n    }\n    return typeof segment === \"object\" && \"_key\" in segment;\n}\nfunction toString(path) {\n    if (!Array.isArray(path)) {\n        throw new Error(\"Path is not an array\");\n    }\n    return path.reduce((target, segment, i)=>{\n        const segmentType = typeof segment;\n        if (segmentType === \"number\") {\n            return \"\".concat(target, \"[\").concat(segment, \"]\");\n        }\n        if (segmentType === \"string\") {\n            const separator = i === 0 ? \"\" : \".\";\n            return \"\".concat(target).concat(separator).concat(segment);\n        }\n        if (isKeySegment(segment) && segment._key) {\n            return \"\".concat(target, '[_key==\"').concat(segment._key, '\"]');\n        }\n        if (Array.isArray(segment)) {\n            const [from, to] = segment;\n            return \"\".concat(target, \"[\").concat(from, \":\").concat(to, \"]\");\n        }\n        throw new Error(\"Unsupported path segment `\".concat(JSON.stringify(segment), \"`\"));\n    }, \"\");\n}\nconst ESCAPE = {\n    \"\\f\": \"\\\\f\",\n    \"\\n\": \"\\\\n\",\n    \"\\r\": \"\\\\r\",\n    \"\t\": \"\\\\t\",\n    \"'\": \"\\\\'\",\n    \"\\\\\": \"\\\\\\\\\"\n};\nconst UNESCAPE = {\n    \"\\\\f\": \"\\f\",\n    \"\\\\n\": \"\\n\",\n    \"\\\\r\": \"\\r\",\n    \"\\\\t\": \"\t\",\n    \"\\\\'\": \"'\",\n    \"\\\\\\\\\": \"\\\\\"\n};\nfunction jsonPath(path) {\n    return \"$\".concat(path.map((segment)=>{\n        if (typeof segment === \"string\") {\n            const escapedKey = segment.replace(/[\\f\\n\\r\\t'\\\\]/g, (match)=>{\n                return ESCAPE[match];\n            });\n            return \"['\".concat(escapedKey, \"']\");\n        }\n        if (typeof segment === \"number\") {\n            return \"[\".concat(segment, \"]\");\n        }\n        if (segment._key !== \"\") {\n            const escapedKey = segment._key.replace(/['\\\\]/g, (match)=>{\n                return ESCAPE[match];\n            });\n            return \"[?(@._key=='\".concat(escapedKey, \"')]\");\n        }\n        return \"[\".concat(segment._index, \"]\");\n    }).join(\"\"));\n}\nfunction parseJsonPath(path) {\n    const parsed = [];\n    const parseRe = /\\['(.*?)'\\]|\\[(\\d+)\\]|\\[\\?\\(@\\._key=='(.*?)'\\)\\]/g;\n    let match;\n    while((match = parseRe.exec(path)) !== null){\n        if (match[1] !== void 0) {\n            const key = match[1].replace(/\\\\(\\\\|f|n|r|t|')/g, (m)=>{\n                return UNESCAPE[m];\n            });\n            parsed.push(key);\n            continue;\n        }\n        if (match[2] !== void 0) {\n            parsed.push(parseInt(match[2], 10));\n            continue;\n        }\n        if (match[3] !== void 0) {\n            const _key = match[3].replace(/\\\\(\\\\')/g, (m)=>{\n                return UNESCAPE[m];\n            });\n            parsed.push({\n                _key,\n                _index: -1\n            });\n            continue;\n        }\n    }\n    return parsed;\n}\nfunction jsonPathToStudioPath(path) {\n    return path.map((segment)=>{\n        if (typeof segment === \"string\") {\n            return segment;\n        }\n        if (typeof segment === \"number\") {\n            return segment;\n        }\n        if (segment._key !== \"\") {\n            return {\n                _key: segment._key\n            };\n        }\n        if (segment._index !== -1) {\n            return segment._index;\n        }\n        throw new Error(\"invalid segment:\".concat(JSON.stringify(segment)));\n    });\n}\nfunction jsonPathToMappingPath(path) {\n    return path.map((segment)=>{\n        if (typeof segment === \"string\") {\n            return segment;\n        }\n        if (typeof segment === \"number\") {\n            return segment;\n        }\n        if (segment._index !== -1) {\n            return segment._index;\n        }\n        throw new Error(\"invalid segment:\".concat(JSON.stringify(segment)));\n    });\n}\nfunction resolveMapping(resultPath, csm) {\n    if (!(csm == null ? void 0 : csm.mappings)) {\n        return void 0;\n    }\n    const resultMappingPath = jsonPath(jsonPathToMappingPath(resultPath));\n    if (csm.mappings[resultMappingPath] !== void 0) {\n        return {\n            mapping: csm.mappings[resultMappingPath],\n            matchedPath: resultMappingPath,\n            pathSuffix: \"\"\n        };\n    }\n    const mappings = Object.entries(csm.mappings).filter(([key])=>resultMappingPath.startsWith(key)).sort(([key1], [key2])=>key2.length - key1.length);\n    if (mappings.length == 0) {\n        return void 0;\n    }\n    const [matchedPath, mapping] = mappings[0];\n    const pathSuffix = resultMappingPath.substring(matchedPath.length);\n    return {\n        mapping,\n        matchedPath,\n        pathSuffix\n    };\n}\nfunction isArray(value) {\n    return value !== null && Array.isArray(value);\n}\nfunction isRecord(value) {\n    return typeof value === \"object\" && value !== null;\n}\nfunction walkMap(value, mappingFn, path = []) {\n    if (isArray(value)) {\n        return value.map((v, idx)=>{\n            if (isRecord(v)) {\n                const _key = v[\"_key\"];\n                if (typeof _key === \"string\") {\n                    return walkMap(v, mappingFn, path.concat({\n                        _key,\n                        _index: idx\n                    }));\n                }\n            }\n            return walkMap(v, mappingFn, path.concat(idx));\n        });\n    }\n    if (isRecord(value)) {\n        return Object.fromEntries(Object.entries(value).map(([k, v])=>[\n                k,\n                walkMap(v, mappingFn, path.concat(k))\n            ]));\n    }\n    return mappingFn(value, path);\n}\nfunction encodeIntoResult(result, csm, encoder) {\n    return walkMap(result, (value, path)=>{\n        if (typeof value !== \"string\") {\n            return value;\n        }\n        const resolveMappingResult = resolveMapping(path, csm);\n        if (!resolveMappingResult) {\n            return value;\n        }\n        const { mapping, matchedPath } = resolveMappingResult;\n        if (mapping.type !== \"value\") {\n            return value;\n        }\n        if (mapping.source.type !== \"documentValue\") {\n            return value;\n        }\n        const sourceDocument = csm.documents[mapping.source.document];\n        const sourcePath = csm.paths[mapping.source.path];\n        const matchPathSegments = parseJsonPath(matchedPath);\n        const sourcePathSegments = parseJsonPath(sourcePath);\n        const fullSourceSegments = sourcePathSegments.concat(path.slice(matchPathSegments.length));\n        return encoder({\n            sourcePath: fullSourceSegments,\n            sourceDocument,\n            resultPath: path,\n            value\n        });\n    });\n}\nconst DRAFTS_PREFIX = \"drafts.\";\nfunction getPublishedId(id) {\n    if (id.startsWith(DRAFTS_PREFIX)) {\n        return id.slice(DRAFTS_PREFIX.length);\n    }\n    return id;\n}\nfunction createEditUrl(options) {\n    const { baseUrl, workspace: _workspace = \"default\", tool: _tool = \"default\", id: _id, type, path } = options;\n    if (!baseUrl) {\n        throw new Error(\"baseUrl is required\");\n    }\n    if (!path) {\n        throw new Error(\"path is required\");\n    }\n    if (!_id) {\n        throw new Error(\"id is required\");\n    }\n    if (baseUrl !== \"/\" && baseUrl.endsWith(\"/\")) {\n        throw new Error(\"baseUrl must not end with a slash\");\n    }\n    const workspace = _workspace === \"default\" ? void 0 : _workspace;\n    const tool = _tool === \"default\" ? void 0 : _tool;\n    const id = getPublishedId(_id);\n    const stringifiedPath = Array.isArray(path) ? toString(jsonPathToStudioPath(path)) : path;\n    const searchParams = new URLSearchParams({\n        baseUrl,\n        id,\n        type,\n        path: stringifiedPath\n    });\n    if (workspace) {\n        searchParams.set(\"workspace\", workspace);\n    }\n    if (tool) {\n        searchParams.set(\"tool\", tool);\n    }\n    const segments = [\n        baseUrl === \"/\" ? \"\" : baseUrl\n    ];\n    if (workspace) {\n        segments.push(workspace);\n    }\n    const routerParams = [\n        \"mode=presentation\",\n        \"id=\".concat(id),\n        \"type=\".concat(type),\n        \"path=\".concat(encodeURIComponent(stringifiedPath))\n    ];\n    if (tool) {\n        routerParams.push(\"tool=\".concat(tool));\n    }\n    segments.push(\"intent\", \"edit\", \"\".concat(routerParams.join(\";\"), \"?\").concat(searchParams));\n    return segments.join(\"/\");\n}\nfunction resolveStudioBaseRoute(studioUrl) {\n    let baseUrl = typeof studioUrl === \"string\" ? studioUrl : studioUrl.baseUrl;\n    if (baseUrl !== \"/\") {\n        baseUrl = baseUrl.replace(/\\/$/, \"\");\n    }\n    if (typeof studioUrl === \"string\") {\n        return {\n            baseUrl\n        };\n    }\n    return {\n        ...studioUrl,\n        baseUrl\n    };\n}\nconst filterDefault = ({ sourcePath, value })=>{\n    if (isValidDate(value) || isValidURL(value)) {\n        return false;\n    }\n    const endPath = sourcePath.at(-1);\n    if (sourcePath.at(-2) === \"slug\" && endPath === \"current\") {\n        return false;\n    }\n    if (typeof endPath === \"string\" && endPath.startsWith(\"_\")) {\n        return false;\n    }\n    if (typeof endPath === \"number\" && sourcePath.at(-2) === \"marks\") {\n        return false;\n    }\n    if (endPath === \"href\" && typeof sourcePath.at(-2) === \"number\" && sourcePath.at(-3) === \"markDefs\") {\n        return false;\n    }\n    if (endPath === \"style\" || endPath === \"listItem\") {\n        return false;\n    }\n    if (sourcePath.some((path)=>path === \"meta\" || path === \"metadata\" || path === \"openGraph\" || path === \"seo\")) {\n        return false;\n    }\n    if (typeof endPath === \"string\" && denylist.has(endPath)) {\n        return false;\n    }\n    return true;\n};\nconst denylist = /* @__PURE__ */ new Set([\n    \"color\",\n    \"colour\",\n    \"currency\",\n    \"email\",\n    \"format\",\n    \"gid\",\n    \"hex\",\n    \"href\",\n    \"hsl\",\n    \"hsla\",\n    \"icon\",\n    \"id\",\n    \"index\",\n    \"key\",\n    \"language\",\n    \"layout\",\n    \"link\",\n    \"linkAction\",\n    \"locale\",\n    \"lqip\",\n    \"page\",\n    \"path\",\n    \"ref\",\n    \"rgb\",\n    \"rgba\",\n    \"route\",\n    \"secret\",\n    \"slug\",\n    \"status\",\n    \"tag\",\n    \"template\",\n    \"theme\",\n    \"type\",\n    \"unit\",\n    \"url\",\n    \"username\",\n    \"variant\",\n    \"website\"\n]);\nfunction isValidDate(dateString) {\n    return /^\\d{4}-\\d{2}-\\d{2}/.test(dateString) ? Boolean(Date.parse(dateString)) : false;\n}\nfunction isValidURL(url) {\n    try {\n        new URL(url, url.startsWith(\"/\") ? \"https://acme.com\" : void 0);\n    } catch  {\n        return false;\n    }\n    return true;\n}\nconst TRUNCATE_LENGTH = 20;\nfunction stegaEncodeSourceMap(result, resultSourceMap, config) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _i;\n    const { filter, logger, enabled } = config;\n    if (!enabled) {\n        const msg = \"config.enabled must be true, don't call this function otherwise\";\n        (_a = logger == null ? void 0 : logger.error) == null ? void 0 : _a.call(logger, \"[@sanity/client/stega]: \".concat(msg), {\n            result,\n            resultSourceMap,\n            config\n        });\n        throw new TypeError(msg);\n    }\n    if (!resultSourceMap) {\n        (_b = logger == null ? void 0 : logger.error) == null ? void 0 : _b.call(logger, \"[@sanity/client/stega]: Missing Content Source Map from response body\", {\n            result,\n            resultSourceMap,\n            config\n        });\n        return result;\n    }\n    if (!config.studioUrl) {\n        const msg = \"config.studioUrl must be defined\";\n        (_c = logger == null ? void 0 : logger.error) == null ? void 0 : _c.call(logger, \"[@sanity/client/stega]: \".concat(msg), {\n            result,\n            resultSourceMap,\n            config\n        });\n        throw new TypeError(msg);\n    }\n    const report = {\n        encoded: [],\n        skipped: []\n    };\n    const resultWithStega = encodeIntoResult(result, resultSourceMap, ({ sourcePath, sourceDocument, resultPath, value })=>{\n        if ((typeof filter === \"function\" ? filter({\n            sourcePath,\n            resultPath,\n            filterDefault,\n            sourceDocument,\n            value\n        }) : filterDefault({\n            sourcePath,\n            resultPath,\n            filterDefault,\n            sourceDocument,\n            value\n        })) === false) {\n            if (logger) {\n                report.skipped.push({\n                    path: prettyPathForLogging(sourcePath),\n                    value: \"\".concat(value.slice(0, TRUNCATE_LENGTH)).concat(value.length > TRUNCATE_LENGTH ? \"...\" : \"\"),\n                    length: value.length\n                });\n            }\n            return value;\n        }\n        if (logger) {\n            report.encoded.push({\n                path: prettyPathForLogging(sourcePath),\n                value: \"\".concat(value.slice(0, TRUNCATE_LENGTH)).concat(value.length > TRUNCATE_LENGTH ? \"...\" : \"\"),\n                length: value.length\n            });\n        }\n        const { baseUrl, workspace, tool } = resolveStudioBaseRoute(typeof config.studioUrl === \"function\" ? config.studioUrl(sourceDocument) : config.studioUrl);\n        if (!baseUrl) return value;\n        const { _id: id, _type: type } = sourceDocument;\n        return (0,_browserMiddleware_zDVeirri_js__WEBPACK_IMPORTED_MODULE_0__.b)(value, {\n            origin: \"sanity.io\",\n            href: createEditUrl({\n                baseUrl,\n                workspace,\n                tool,\n                id,\n                type,\n                path: sourcePath\n            })\n        }, // We use custom logic to determine if we should skip encoding\n        false);\n    });\n    if (logger) {\n        const isSkipping = report.skipped.length;\n        const isEncoding = report.encoded.length;\n        if (isSkipping || isEncoding) {\n            (_d = (logger == null ? void 0 : logger.groupCollapsed) || logger.log) == null ? void 0 : _d(\"[@sanity/client/stega]: Encoding source map into result\");\n            (_e = logger.log) == null ? void 0 : _e.call(logger, \"[@sanity/client/stega]: Paths encoded: \".concat(report.encoded.length, \", skipped: \").concat(report.skipped.length));\n        }\n        if (report.encoded.length > 0) {\n            (_f = logger == null ? void 0 : logger.log) == null ? void 0 : _f.call(logger, \"[@sanity/client/stega]: Table of encoded paths\");\n            (_g = (logger == null ? void 0 : logger.table) || logger.log) == null ? void 0 : _g(report.encoded);\n        }\n        if (report.skipped.length > 0) {\n            const skipped = /* @__PURE__ */ new Set();\n            for (const { path } of report.skipped){\n                skipped.add(path.replace(reKeySegment, \"0\").replace(/\\[\\d+\\]/g, \"[]\"));\n            }\n            (_h = logger == null ? void 0 : logger.log) == null ? void 0 : _h.call(logger, \"[@sanity/client/stega]: List of skipped paths\", [\n                ...skipped.values()\n            ]);\n        }\n        if (isSkipping || isEncoding) {\n            (_i = logger == null ? void 0 : logger.groupEnd) == null ? void 0 : _i.call(logger);\n        }\n    }\n    return resultWithStega;\n}\nfunction prettyPathForLogging(path) {\n    return toString(jsonPathToStudioPath(path));\n}\nvar stegaEncodeSourceMap$1 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    stegaEncodeSourceMap: stegaEncodeSourceMap\n});\n //# sourceMappingURL=stegaEncodeSourceMap-gZIRaYar.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sanity/client/dist/_chunks/stegaEncodeSourceMap-gZIRaYar.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sanity/client/dist/index.browser.js":
/*!***********************************************************!*\
  !*** ./node_modules/@sanity/client/dist/index.browser.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BasePatch: () => (/* reexport safe */ _chunks_browserMiddleware_zDVeirri_js__WEBPACK_IMPORTED_MODULE_0__.BasePatch),\n/* harmony export */   BaseTransaction: () => (/* reexport safe */ _chunks_browserMiddleware_zDVeirri_js__WEBPACK_IMPORTED_MODULE_0__.BaseTransaction),\n/* harmony export */   ClientError: () => (/* reexport safe */ _chunks_browserMiddleware_zDVeirri_js__WEBPACK_IMPORTED_MODULE_0__.ClientError),\n/* harmony export */   ObservablePatch: () => (/* reexport safe */ _chunks_browserMiddleware_zDVeirri_js__WEBPACK_IMPORTED_MODULE_0__.ObservablePatch),\n/* harmony export */   ObservableSanityClient: () => (/* reexport safe */ _chunks_browserMiddleware_zDVeirri_js__WEBPACK_IMPORTED_MODULE_0__.ObservableSanityClient),\n/* harmony export */   ObservableTransaction: () => (/* reexport safe */ _chunks_browserMiddleware_zDVeirri_js__WEBPACK_IMPORTED_MODULE_0__.ObservableTransaction),\n/* harmony export */   Patch: () => (/* reexport safe */ _chunks_browserMiddleware_zDVeirri_js__WEBPACK_IMPORTED_MODULE_0__.Patch),\n/* harmony export */   SanityClient: () => (/* reexport safe */ _chunks_browserMiddleware_zDVeirri_js__WEBPACK_IMPORTED_MODULE_0__.SanityClient),\n/* harmony export */   ServerError: () => (/* reexport safe */ _chunks_browserMiddleware_zDVeirri_js__WEBPACK_IMPORTED_MODULE_0__.ServerError),\n/* harmony export */   Transaction: () => (/* reexport safe */ _chunks_browserMiddleware_zDVeirri_js__WEBPACK_IMPORTED_MODULE_0__.Transaction),\n/* harmony export */   createClient: () => (/* binding */ createClient),\n/* harmony export */   \"default\": () => (/* binding */ deprecatedCreateClient),\n/* harmony export */   requester: () => (/* binding */ requester),\n/* harmony export */   unstable__adapter: () => (/* reexport safe */ get_it__WEBPACK_IMPORTED_MODULE_1__.adapter),\n/* harmony export */   unstable__environment: () => (/* reexport safe */ get_it__WEBPACK_IMPORTED_MODULE_1__.environment)\n/* harmony export */ });\n/* harmony import */ var _chunks_browserMiddleware_zDVeirri_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_chunks/browserMiddleware-zDVeirri.js */ \"(rsc)/./node_modules/@sanity/client/dist/_chunks/browserMiddleware-zDVeirri.js\");\n/* harmony import */ var get_it__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! get-it */ \"(rsc)/./node_modules/get-it/dist/index.react-server.js\");\n\n\n\nfunction defineDeprecatedCreateClient(createClient) {\n    return function deprecatedCreateClient(config) {\n        (0,_chunks_browserMiddleware_zDVeirri_js__WEBPACK_IMPORTED_MODULE_0__.printNoDefaultExport)();\n        return createClient(config);\n    };\n}\nconst exp = (0,_chunks_browserMiddleware_zDVeirri_js__WEBPACK_IMPORTED_MODULE_0__.defineCreateClientExports)(_chunks_browserMiddleware_zDVeirri_js__WEBPACK_IMPORTED_MODULE_0__.envMiddleware, _chunks_browserMiddleware_zDVeirri_js__WEBPACK_IMPORTED_MODULE_0__.SanityClient);\nconst requester = exp.requester;\nconst createClient = exp.createClient;\nconst deprecatedCreateClient = defineDeprecatedCreateClient(createClient);\n //# sourceMappingURL=index.browser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNhbml0eS9jbGllbnQvZGlzdC9pbmRleC5icm93c2VyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXVJO0FBQzREO0FBQ3ZHO0FBRTVGLFNBQVNpQiw2QkFBNkJDLFlBQVk7SUFDaEQsT0FBTyxTQUFTQyx1QkFBdUJDLE1BQU07UUFDM0NwQiwyRkFBb0JBO1FBQ3BCLE9BQU9rQixhQUFhRTtJQUN0QjtBQUNGO0FBRUEsTUFBTUMsTUFBTXBCLGdHQUF5QkEsQ0FBQ0UsZ0ZBQWFBLEVBQUVELCtFQUFZQTtBQUNqRSxNQUFNb0IsWUFBWUQsSUFBSUMsU0FBUztBQUMvQixNQUFNSixlQUFlRyxJQUFJSCxZQUFZO0FBQ3JDLE1BQU1DLHlCQUF5QkYsNkJBQTZCQztBQUV3QixDQUNwRix5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ob3RlbF9tYW5hZ2VtZW50Ly4vbm9kZV9tb2R1bGVzL0BzYW5pdHkvY2xpZW50L2Rpc3QvaW5kZXguYnJvd3Nlci5qcz85OThhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHByaW50Tm9EZWZhdWx0RXhwb3J0LCBkZWZpbmVDcmVhdGVDbGllbnRFeHBvcnRzLCBTYW5pdHlDbGllbnQsIGVudk1pZGRsZXdhcmUgfSBmcm9tICcuL19jaHVua3MvYnJvd3Nlck1pZGRsZXdhcmUtekRWZWlycmkuanMnO1xuZXhwb3J0IHsgQmFzZVBhdGNoLCBCYXNlVHJhbnNhY3Rpb24sIENsaWVudEVycm9yLCBPYnNlcnZhYmxlUGF0Y2gsIE9ic2VydmFibGVTYW5pdHlDbGllbnQsIE9ic2VydmFibGVUcmFuc2FjdGlvbiwgUGF0Y2gsIFNlcnZlckVycm9yLCBUcmFuc2FjdGlvbiB9IGZyb20gJy4vX2NodW5rcy9icm93c2VyTWlkZGxld2FyZS16RFZlaXJyaS5qcyc7XG5leHBvcnQgeyBhZGFwdGVyIGFzIHVuc3RhYmxlX19hZGFwdGVyLCBlbnZpcm9ubWVudCBhcyB1bnN0YWJsZV9fZW52aXJvbm1lbnQgfSBmcm9tICdnZXQtaXQnO1xuXG5mdW5jdGlvbiBkZWZpbmVEZXByZWNhdGVkQ3JlYXRlQ2xpZW50KGNyZWF0ZUNsaWVudCkge1xuICByZXR1cm4gZnVuY3Rpb24gZGVwcmVjYXRlZENyZWF0ZUNsaWVudChjb25maWcpIHtcbiAgICBwcmludE5vRGVmYXVsdEV4cG9ydCgpO1xuICAgIHJldHVybiBjcmVhdGVDbGllbnQoY29uZmlnKTtcbiAgfTtcbn1cblxuY29uc3QgZXhwID0gZGVmaW5lQ3JlYXRlQ2xpZW50RXhwb3J0cyhlbnZNaWRkbGV3YXJlLCBTYW5pdHlDbGllbnQpO1xuY29uc3QgcmVxdWVzdGVyID0gZXhwLnJlcXVlc3RlcjtcbmNvbnN0IGNyZWF0ZUNsaWVudCA9IGV4cC5jcmVhdGVDbGllbnQ7XG5jb25zdCBkZXByZWNhdGVkQ3JlYXRlQ2xpZW50ID0gZGVmaW5lRGVwcmVjYXRlZENyZWF0ZUNsaWVudChjcmVhdGVDbGllbnQpO1xuXG5leHBvcnQgeyBTYW5pdHlDbGllbnQsIGNyZWF0ZUNsaWVudCwgZGVwcmVjYXRlZENyZWF0ZUNsaWVudCBhcyBkZWZhdWx0LCByZXF1ZXN0ZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmJyb3dzZXIuanMubWFwXG4iXSwibmFtZXMiOlsicHJpbnROb0RlZmF1bHRFeHBvcnQiLCJkZWZpbmVDcmVhdGVDbGllbnRFeHBvcnRzIiwiU2FuaXR5Q2xpZW50IiwiZW52TWlkZGxld2FyZSIsIkJhc2VQYXRjaCIsIkJhc2VUcmFuc2FjdGlvbiIsIkNsaWVudEVycm9yIiwiT2JzZXJ2YWJsZVBhdGNoIiwiT2JzZXJ2YWJsZVNhbml0eUNsaWVudCIsIk9ic2VydmFibGVUcmFuc2FjdGlvbiIsIlBhdGNoIiwiU2VydmVyRXJyb3IiLCJUcmFuc2FjdGlvbiIsImFkYXB0ZXIiLCJ1bnN0YWJsZV9fYWRhcHRlciIsImVudmlyb25tZW50IiwidW5zdGFibGVfX2Vudmlyb25tZW50IiwiZGVmaW5lRGVwcmVjYXRlZENyZWF0ZUNsaWVudCIsImNyZWF0ZUNsaWVudCIsImRlcHJlY2F0ZWRDcmVhdGVDbGllbnQiLCJjb25maWciLCJleHAiLCJyZXF1ZXN0ZXIiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sanity/client/dist/index.browser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sanity/preview-kit/dist/client/createClient.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sanity/preview-kit/dist/client/createClient.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createClient: () => (/* binding */ r)\n/* harmony export */ });\n/* harmony import */ var _sanity_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sanity/client */ \"(rsc)/./node_modules/@sanity/client/dist/index.browser.js\");\n\nconst r = (r)=>{\n    var o, a;\n    const { encodeSourceMap: c = t(), encodeSourceMapAtPath: i, studioUrl: u = n(), logger: l, ...s } = r;\n    let p = !0 === c;\n    if (\"auto\" === c && (p = function() {\n        try {\n            return \"preview\" === /* unsupported import.meta.env.VERCEL_ENV */ undefined.VERCEL_ENV;\n        } catch  {}\n        try {\n            return \"preview\" === process.env.VERCEL_ENV;\n        } catch  {}\n        return !1;\n    }()), \"string\" == typeof c && \"auto\" !== c) throw new Error(\"Invalid value for encodeSourceMap: \".concat(c, \". Did you mean 'auto'?\"));\n    try {\n        if (p && !1 !== r.resultSourceMap) return u ? (null == (a = null == l ? void 0 : l.debug) || a.call(l, \"[@sanity/preview-kit]: Creating source map enabled client\"), (0,_sanity_client__WEBPACK_IMPORTED_MODULE_0__.createClient)({\n            ...s,\n            resultSourceMap: r.resultSourceMap ? r.resultSourceMap : \"withKeyArraySelector\",\n            stega: {\n                enabled: !0,\n                studioUrl: u,\n                logger: l,\n                filter: i ? (e)=>i({\n                        path: e.sourcePath,\n                        filterDefault: ()=>e.filterDefault(e)\n                    }) : void 0\n            }\n        })) : (null == (o = null == l ? void 0 : l.error) || o.call(l, \"[@sanity/preview-kit]: Content source map enabled client is enabled, but no studioUrl is provided. Falling back to @sanity/client\"), (0,_sanity_client__WEBPACK_IMPORTED_MODULE_0__.createClient)(s));\n    } catch (e) {\n        console.error(\"[@sanity/preview-kit]: Error creating client\", e, \"falling back to non-embedded sourcemap mode\");\n    }\n    return (0,_sanity_client__WEBPACK_IMPORTED_MODULE_0__.createClient)(s);\n};\nfunction t() {\n    try {\n        return \"true\" === /* unsupported import.meta.env.SANITY_SOURCE_MAP */ undefined.SANITY_SOURCE_MAP;\n    } catch  {}\n    try {\n        return \"true\" === process.env.SANITY_SOURCE_MAP;\n    } catch  {}\n    return !1;\n}\nfunction n() {\n    try {\n        return /* unsupported import.meta.env.SANITY_STUDIO_URL */ undefined.SANITY_STUDIO_URL;\n    } catch  {}\n    try {\n        return process.env.SANITY_STUDIO_URL;\n    } catch  {}\n}\n //# sourceMappingURL=createClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNhbml0eS9wcmV2aWV3LWtpdC9kaXN0L2NsaWVudC9jcmVhdGVDbGllbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBOEM7QUFBQSxNQUFNRSxJQUFFQSxDQUFBQTtJQUFJLElBQUlDLEdBQUVDO0lBQUUsTUFBSyxFQUFDQyxpQkFBZ0JDLElBQUVDLEdBQUcsRUFBQ0MsdUJBQXNCQyxDQUFDLEVBQUNDLFdBQVVDLElBQUVDLEdBQUcsRUFBQ0MsUUFBT0MsQ0FBQyxFQUFDLEdBQUdDLEdBQUUsR0FBQ2I7SUFBRSxJQUFJYyxJQUFFLENBQUMsTUFBSVY7SUFBRSxJQUFHLFdBQVNBLEtBQUlVLENBQUFBLElBQUU7UUFBVyxJQUFHO1lBQUMsT0FBTSxjQUFZLGlFQUEwQjtRQUFBLEVBQUMsT0FBSyxDQUFDO1FBQUMsSUFBRztZQUFDLE9BQU0sY0FBWUcsUUFBUUYsR0FBRyxDQUFDQyxVQUFVO1FBQUEsRUFBQyxPQUFLLENBQUM7UUFBQyxPQUFNLENBQUM7SUFBQyxHQUFFLEdBQUcsWUFBVSxPQUFPWixLQUFHLFdBQVNBLEdBQUUsTUFBTSxJQUFJYyxNQUFNLHNDQUFzQ0MsTUFBTSxDQUFDZixHQUFFO0lBQTJCLElBQUc7UUFBQyxJQUFHVSxLQUFHLENBQUMsTUFBSWQsRUFBRW9CLGVBQWUsRUFBQyxPQUFPWCxJQUFHLFNBQU9QLENBQUFBLElBQUUsUUFBTVUsSUFBRSxLQUFLLElBQUVBLEVBQUVTLEtBQUssS0FBR25CLEVBQUVvQixJQUFJLENBQUNWLEdBQUUsOERBQTZEYiw0REFBQ0EsQ0FBQztZQUFDLEdBQUdjLENBQUM7WUFBQ08saUJBQWdCcEIsRUFBRW9CLGVBQWUsR0FBQ3BCLEVBQUVvQixlQUFlLEdBQUM7WUFBdUJHLE9BQU07Z0JBQUNDLFNBQVEsQ0FBQztnQkFBRWhCLFdBQVVDO2dCQUFFRSxRQUFPQztnQkFBRWEsUUFBT2xCLElBQUVSLENBQUFBLElBQUdRLEVBQUU7d0JBQUNtQixNQUFLM0IsRUFBRTRCLFVBQVU7d0JBQUNDLGVBQWMsSUFBSTdCLEVBQUU2QixhQUFhLENBQUM3QjtvQkFBRSxLQUFHLEtBQUs7WUFBQztRQUFDLEVBQUMsSUFBSSxTQUFPRSxDQUFBQSxJQUFFLFFBQU1XLElBQUUsS0FBSyxJQUFFQSxFQUFFaUIsS0FBSyxLQUFHNUIsRUFBRXFCLElBQUksQ0FBQ1YsR0FBRSxzSUFBcUliLDREQUFDQSxDQUFDYyxFQUFDO0lBQUUsRUFBQyxPQUFNZCxHQUFFO1FBQUMrQixRQUFRRCxLQUFLLENBQUMsZ0RBQStDOUIsR0FBRTtJQUE4QztJQUFDLE9BQU9BLDREQUFDQSxDQUFDYztBQUFFO0FBQUUsU0FBU1I7SUFBSSxJQUFHO1FBQUMsT0FBTSxXQUFTLCtFQUFpQztJQUFBLEVBQUMsT0FBSyxDQUFDO0lBQUMsSUFBRztRQUFDLE9BQU0sV0FBU1ksUUFBUUYsR0FBRyxDQUFDZ0IsaUJBQWlCO0lBQUEsRUFBQyxPQUFLLENBQUM7SUFBQyxPQUFNLENBQUM7QUFBQztBQUFDLFNBQVNyQjtJQUFJLElBQUc7UUFBQyxPQUFPLCtFQUFpQztJQUFBLEVBQUMsT0FBSyxDQUFDO0lBQUMsSUFBRztRQUFDLE9BQU9PLFFBQVFGLEdBQUcsQ0FBQ2lCLGlCQUFpQjtJQUFBLEVBQUMsT0FBSyxDQUFDO0FBQUM7QUFBMkIsQ0FDcDJDLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL2hvdGVsX21hbmFnZW1lbnQvLi9ub2RlX21vZHVsZXMvQHNhbml0eS9wcmV2aWV3LWtpdC9kaXN0L2NsaWVudC9jcmVhdGVDbGllbnQuanM/M2JiOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnR7Y3JlYXRlQ2xpZW50IGFzIGV9ZnJvbVwiQHNhbml0eS9jbGllbnRcIjtjb25zdCByPXI9Pnt2YXIgbyxhO2NvbnN0e2VuY29kZVNvdXJjZU1hcDpjPXQoKSxlbmNvZGVTb3VyY2VNYXBBdFBhdGg6aSxzdHVkaW9Vcmw6dT1uKCksbG9nZ2VyOmwsLi4uc309cjtsZXQgcD0hMD09PWM7aWYoXCJhdXRvXCI9PT1jJiYocD1mdW5jdGlvbigpe3RyeXtyZXR1cm5cInByZXZpZXdcIj09PWltcG9ydC5tZXRhLmVudi5WRVJDRUxfRU5WfWNhdGNoe310cnl7cmV0dXJuXCJwcmV2aWV3XCI9PT1wcm9jZXNzLmVudi5WRVJDRUxfRU5WfWNhdGNoe31yZXR1cm4hMX0oKSksXCJzdHJpbmdcIj09dHlwZW9mIGMmJlwiYXV0b1wiIT09Yyl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHZhbHVlIGZvciBlbmNvZGVTb3VyY2VNYXA6IFwiLmNvbmNhdChjLFwiLiBEaWQgeW91IG1lYW4gJ2F1dG8nP1wiKSk7dHJ5e2lmKHAmJiExIT09ci5yZXN1bHRTb3VyY2VNYXApcmV0dXJuIHU/KG51bGw9PShhPW51bGw9PWw/dm9pZCAwOmwuZGVidWcpfHxhLmNhbGwobCxcIltAc2FuaXR5L3ByZXZpZXcta2l0XTogQ3JlYXRpbmcgc291cmNlIG1hcCBlbmFibGVkIGNsaWVudFwiKSxlKHsuLi5zLHJlc3VsdFNvdXJjZU1hcDpyLnJlc3VsdFNvdXJjZU1hcD9yLnJlc3VsdFNvdXJjZU1hcDpcIndpdGhLZXlBcnJheVNlbGVjdG9yXCIsc3RlZ2E6e2VuYWJsZWQ6ITAsc3R1ZGlvVXJsOnUsbG9nZ2VyOmwsZmlsdGVyOmk/ZT0+aSh7cGF0aDplLnNvdXJjZVBhdGgsZmlsdGVyRGVmYXVsdDooKT0+ZS5maWx0ZXJEZWZhdWx0KGUpfSk6dm9pZCAwfX0pKToobnVsbD09KG89bnVsbD09bD92b2lkIDA6bC5lcnJvcil8fG8uY2FsbChsLFwiW0BzYW5pdHkvcHJldmlldy1raXRdOiBDb250ZW50IHNvdXJjZSBtYXAgZW5hYmxlZCBjbGllbnQgaXMgZW5hYmxlZCwgYnV0IG5vIHN0dWRpb1VybCBpcyBwcm92aWRlZC4gRmFsbGluZyBiYWNrIHRvIEBzYW5pdHkvY2xpZW50XCIpLGUocykpfWNhdGNoKGUpe2NvbnNvbGUuZXJyb3IoXCJbQHNhbml0eS9wcmV2aWV3LWtpdF06IEVycm9yIGNyZWF0aW5nIGNsaWVudFwiLGUsXCJmYWxsaW5nIGJhY2sgdG8gbm9uLWVtYmVkZGVkIHNvdXJjZW1hcCBtb2RlXCIpfXJldHVybiBlKHMpfTtmdW5jdGlvbiB0KCl7dHJ5e3JldHVyblwidHJ1ZVwiPT09aW1wb3J0Lm1ldGEuZW52LlNBTklUWV9TT1VSQ0VfTUFQfWNhdGNoe310cnl7cmV0dXJuXCJ0cnVlXCI9PT1wcm9jZXNzLmVudi5TQU5JVFlfU09VUkNFX01BUH1jYXRjaHt9cmV0dXJuITF9ZnVuY3Rpb24gbigpe3RyeXtyZXR1cm4gaW1wb3J0Lm1ldGEuZW52LlNBTklUWV9TVFVESU9fVVJMfWNhdGNoe310cnl7cmV0dXJuIHByb2Nlc3MuZW52LlNBTklUWV9TVFVESU9fVVJMfWNhdGNoe319ZXhwb3J0e3IgYXMgY3JlYXRlQ2xpZW50fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZUNsaWVudC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJjcmVhdGVDbGllbnQiLCJlIiwiciIsIm8iLCJhIiwiZW5jb2RlU291cmNlTWFwIiwiYyIsInQiLCJlbmNvZGVTb3VyY2VNYXBBdFBhdGgiLCJpIiwic3R1ZGlvVXJsIiwidSIsIm4iLCJsb2dnZXIiLCJsIiwicyIsInAiLCJlbnYiLCJWRVJDRUxfRU5WIiwicHJvY2VzcyIsIkVycm9yIiwiY29uY2F0IiwicmVzdWx0U291cmNlTWFwIiwiZGVidWciLCJjYWxsIiwic3RlZ2EiLCJlbmFibGVkIiwiZmlsdGVyIiwicGF0aCIsInNvdXJjZVBhdGgiLCJmaWx0ZXJEZWZhdWx0IiwiZXJyb3IiLCJjb25zb2xlIiwiU0FOSVRZX1NPVVJDRV9NQVAiLCJTQU5JVFlfU1RVRElPX1VSTCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sanity/preview-kit/dist/client/createClient.js\n");

/***/ })

};
;